{"ast":null,"code":"import Query from \"../models/Query\";\nimport config from '../config.json';\nimport Utils from \"./Utils\";\nexport default class CardControls {\n  static loadCardsHeading(app, cards) {\n    let views = config.cardViews;\n    let currentView = app.state.config.ui.cards;\n    let view = views[0];\n\n    for (let i in views) if (currentView === views[i].key) view = views[i];\n\n    let s = cards.length !== 1 ? \"s\" : \"\";\n    let counter = cards.length + \" \" + view.counter + s;\n    let heading = CardControls.prepareHeading(app, view.heading, view);\n    return {\n      heading: heading,\n      counter: counter\n    };\n  }\n\n  static prepareHeading(app, heading, view) {\n    if (!heading.match(/{{_}}/)) return heading;\n    let sides = heading.split(\"{{_}}\");\n    let headingvariable = view.headingvariable;\n    let filter = app.getFilter(headingvariable);\n    let variable = filter.criteria[0];\n    if (Utils.isEmpty(variable)) variable = view.headingdefaultvariable;\n    return sides[0] + Utils.lowerCase(variable) + sides[1];\n  }\n\n  static onClickCard(item) {\n    this.setUIState(\"infoBox\", {\n      isOpen: true,\n      type: item.type,\n      id: item.id\n    });\n  }\n\n  static loadCardView(app) {\n    let type = app.state.config.ui.cards;\n\n    for (let i in config.cardViews) if (config.cardViews[i].key === type) return config.cardViews[i];\n\n    return null;\n  }\n\n  static loadCardGroupings(app) {\n    let cardView = this.loadCardView(app);\n    if (cardView === null) return null;\n    let cardKey = cardView.key;\n    let groupings = config.elements[cardKey].valueFields;\n    let output = [{\n      label: \"—None—\",\n      key: null\n    }];\n\n    for (let i in groupings) output.push({\n      label: groupings[i],\n      key: i\n    });\n\n    return output;\n  }\n\n  static loadCardGrouping(app) {\n    return app.getUIConfig(\"grouping\");\n  }\n\n  static loadGroupingFieldFromKey(elementKey, groupkey) {\n    return config.elements[elementKey].valueFields[groupkey];\n  }\n\n  static currentCardGrouping(app) {\n    let key = app.getUIConfig(\"grouping\");\n    let card = app.getUIConfig(\"cards\");\n    let val = config.elements[card].valueFields[key];\n    if (Utils.isEmpty(val)) return {\n      label: \"—None—\",\n      value: null\n    };\n    return {\n      label: val,\n      value: key\n    };\n  }\n\n  static currentCardLabel(app) {\n    let key = app.getUIConfig(\"label\");\n    let card = app.getUIConfig(\"cards\");\n    let val = config.elements[card].valueFields[key];\n    if (Utils.isEmpty(val)) return {\n      label: \"—None—\",\n      value: null\n    };\n    return {\n      label: val,\n      value: key\n    };\n  }\n\n  static loadCardGroups(app, cards) {\n    let grouping = this.loadCardGrouping(app);\n    if (grouping === null) return [null];\n    let fields = [];\n\n    for (let i in cards) {\n      let groupingField = this.loadGroupingFieldFromKey(cards[i].type, grouping);\n      let items = cards[i].fields[groupingField];\n      if (items === undefined) continue;\n      if (!Array.isArray(items)) items = [items];\n      fields = fields.concat(items);\n    }\n\n    fields = Utils.dedupe(fields);\n    fields = Utils.sortFieldArray(fields, grouping);\n    return fields;\n  }\n\n  static cardNotInGroup(app, card, group) {\n    if (group === null) return false;\n    let groupingKey = app.state.config.ui.grouping;\n    if (groupingKey === null) return false;\n    let groupingField = config.elements[card.type].valueFields[groupingKey];\n    let fields = card.fields[groupingField];\n    if (!Array.isArray(fields)) fields = [fields];\n    if (fields.indexOf(group) < 0) return true;\n  }\n\n  static groupCards(selection) {\n    this.setUIConfig(\"grouping\", selection.key);\n  }\n\n  static loadCardLabels(app) {\n    return this.loadCardGroupings(app);\n  }\n\n  static labelCards(selection) {\n    this.setUIConfig(\"label\", selection.key);\n  }\n\n  static hasLabel(app) {\n    return app.getUIConfig(\"label\") !== null;\n  }\n\n  static getCardLabel(app, card) {\n    let selectedLabelKey = app.state.config.ui.label;\n    let cardType = card.type;\n    if (config.elements[cardType].valueFields[selectedLabelKey] === undefined) return null;\n    let cardLabelField = config.elements[cardType].valueFields[selectedLabelKey];\n    let labelValue = card.fields[cardLabelField];\n    if (Array.isArray(labelValue)) labelValue = labelValue.join(\", \");\n    return {\n      label: labelValue,\n      color: Utils.getLabelColor(labelValue)\n    };\n  }\n\n  static buildHeading(item) {\n    let fieldtoHighlight = config.elements[item.type].highlight;\n    if (Utils.isEmpty(fieldtoHighlight)) return {\n      heading: item.heading\n    };\n    return {\n      heading: item.heading,\n      highlight: item.fields[fieldtoHighlight]\n    };\n  }\n\n}\n\nCardControls.loadCards = function (app) {\n  let query = \"story\"; //All queries go through user stories\n\n  let map = app.state.config.ui.cards; //map = \"theme\"; //force theme cards\n\n  let queryObj = new Query({\n    app: app,\n    query: query,\n    map: map\n  }); //console.log({ app: app, query: query, map: map },queryObj); \n\n  let items = queryObj.filteredObjects();\n  return items.map(item => {\n    return item.loadCardData();\n  });\n};\n\nCardControls.loadCard = function (state) {\n  return {};\n};","map":{"version":3,"sources":["/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/src/controllers/CardControls.js"],"names":["Query","config","Utils","CardControls","loadCardsHeading","app","cards","views","cardViews","currentView","state","ui","view","i","key","s","length","counter","heading","prepareHeading","match","sides","split","headingvariable","filter","getFilter","variable","criteria","isEmpty","headingdefaultvariable","lowerCase","onClickCard","item","setUIState","isOpen","type","id","loadCardView","loadCardGroupings","cardView","cardKey","groupings","elements","valueFields","output","label","push","loadCardGrouping","getUIConfig","loadGroupingFieldFromKey","elementKey","groupkey","currentCardGrouping","card","val","value","currentCardLabel","loadCardGroups","grouping","fields","groupingField","items","undefined","Array","isArray","concat","dedupe","sortFieldArray","cardNotInGroup","group","groupingKey","indexOf","groupCards","selection","setUIConfig","loadCardLabels","labelCards","hasLabel","getCardLabel","selectedLabelKey","cardType","cardLabelField","labelValue","join","color","getLabelColor","buildHeading","fieldtoHighlight","highlight","loadCards","query","map","queryObj","filteredObjects","loadCardData","loadCard"],"mappings":"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","sourcesContent":["\nimport Query from \"../models/Query\";\nimport config from '../config.json';\nimport Utils from \"./Utils\";\n\nexport default class CardControls {\n\n    static loadCards = function (app) {\n\n        let query = \"story\"; //All queries go through user stories\n        let map = app.state.config.ui.cards;\n        //map = \"theme\"; //force theme cards\n        let queryObj = new Query({app:app,query:query,map:map}); \n        //console.log({ app: app, query: query, map: map },queryObj); \n        let items = queryObj.filteredObjects();\n        return items.map(item => { return item.loadCardData() });\n\n\n    }\n\n    static loadCard = function (state) {\n\n        return {}\n\n    }\n\n\n    static loadCardsHeading(app,cards) {\n\n        let views = config.cardViews;\n        let currentView = app.state.config.ui.cards;\n\n        let view = views[0]\n        for (let i in views) if (currentView === views[i].key) view = views[i];\n\n        let s = (cards.length!==1) ? \"s\" : \"\";\n        let counter = cards.length+ \" \" +view.counter + s;\n\n        let heading = CardControls.prepareHeading(app,view.heading,view)\n\n        return {\n            heading: heading,\n            counter: counter\n        }\n\n    }\n\n    static prepareHeading(app,heading,view)\n    {\n        if(!heading.match(/{{_}}/)) return heading;\n        let sides = heading.split(\"{{_}}\");\n\n        let headingvariable = view.headingvariable;\n        let filter = app.getFilter(headingvariable);\n\n        let variable = filter.criteria[0];\n        if(Utils.isEmpty(variable)) variable =  view.headingdefaultvariable;\n \n        return  sides[0]+Utils.lowerCase(variable)+sides[1];\n    }\n\n\n    static onClickCard(item)\n    {\n        this.setUIState(\"infoBox\", { isOpen: true,  type: item.type, id: item.id});\n    }\n\n\n    static loadCardView(app)\n    {\n        let type = app.state.config.ui.cards;\n        for(let i in config.cardViews)\n            if(config.cardViews[i].key===type) return  config.cardViews[i]\n        return null;\n    }\n\n    static loadCardGroupings(app)\n    {\n        let cardView = this.loadCardView(app);\n        if(cardView===null) return null;\n        let cardKey = cardView.key;\n        let groupings = config.elements[cardKey].valueFields;\n        let output = [{ label: \"—None—\",key:null}];\n        for (let i in groupings) output.push({ label: groupings[i],key:i});\n        return output;\n    }\n\n    static loadCardGrouping(app) {\n        return app.getUIConfig(\"grouping\");\n    }\n\n    static loadGroupingFieldFromKey(elementKey,groupkey) {\n        \n        return config.elements[elementKey].valueFields[groupkey];\n\n\n    }\n\n    static currentCardGrouping(app)\n    {\n        let key = app.getUIConfig(\"grouping\");\n        let card = app.getUIConfig(\"cards\");\n        let val =  config.elements[card].valueFields[key];\n        if(Utils.isEmpty(val)) return {label:\"—None—\",value:null};\n        return {label:val,value:key};\n    }\n\n    static currentCardLabel(app)\n    {\n        let key = app.getUIConfig(\"label\");\n        let card = app.getUIConfig(\"cards\");\n        let val =  config.elements[card].valueFields[key];\n        if(Utils.isEmpty(val)) return {label:\"—None—\",value:null};\n        return {label:val,value:key};\n    }\n\n    static loadCardGroups(app,cards)\n    {\n        let grouping = this.loadCardGrouping(app);\n        if(grouping===null) return [null];\n        let fields = [];\n        for(let i in  cards)\n        {\n            let groupingField = this.loadGroupingFieldFromKey(cards[i].type,grouping);\n            let items = cards[i].fields[groupingField];\n            if(items===undefined) continue;\n            if(!Array.isArray(items)) items = [items];\n            fields = fields.concat(items);\n        }\n        fields = Utils.dedupe(fields);\n        fields = Utils.sortFieldArray(fields,grouping);\n        return fields;\n    }\n\n    static cardNotInGroup(app,card,group)\n    {\n        if(group===null) return false;\n        let groupingKey = app.state.config.ui.grouping;\n        if (groupingKey===null) return false;\n        let groupingField = config.elements[card.type].valueFields[groupingKey];\n        let fields = card.fields[groupingField];\n        if(!Array.isArray(fields)) fields = [fields];\n        if(fields.indexOf(group)<0) return true;\n    }\n\n    static groupCards(selection)\n    {\n        this.setUIConfig(\"grouping\", selection.key);\n    }\n\n\n\n    static loadCardLabels(app) {\n        return this.loadCardGroupings(app);\n    }\n    static labelCards(selection) {\n        this.setUIConfig(\"label\", selection.key);\n    }\n    static hasLabel(app)\n    {\n        return app.getUIConfig(\"label\")!==null\n    }\n\n    static getCardLabel(app,card) {\n        let selectedLabelKey = app.state.config.ui.label;\n        let cardType = card.type;\n        if (config.elements[cardType].valueFields[selectedLabelKey] === undefined) return null;\n        let cardLabelField = config.elements[cardType].valueFields[selectedLabelKey];\n        let labelValue = card.fields[cardLabelField];\n\n        if(Array.isArray(labelValue)) labelValue = labelValue.join(\", \");\n\n        return { label: labelValue, color: Utils.getLabelColor(labelValue)}\n    }\n\n\n    static buildHeading(item)\n    {\n        let fieldtoHighlight = config.elements[item.type].highlight;\n        if(Utils.isEmpty(fieldtoHighlight)) return {heading:item.heading};\n        return {heading:item.heading,highlight:item.fields[fieldtoHighlight]};\n        \n    }\n\n}"]},"metadata":{},"sourceType":"module"}