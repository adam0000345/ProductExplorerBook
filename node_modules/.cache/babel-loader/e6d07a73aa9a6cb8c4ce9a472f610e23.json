{"ast":null,"code":"//import Utils from '../controllers/Utils';\nimport Query from './Query';\nimport config from '../config.json';\nexport default class BaseElement {\n  constructor(type, app, item) {\n    this.typekey = type;\n    this.data = item;\n    this.app = app;\n    this.element = config.elements[this.typekey];\n    this.titlekey = this.element.field;\n    this.idFields = this.element.idFields;\n    this.tagline = this.element.tagline;\n  }\n\n  filter(filters) {\n    return Query.filter(filters, this);\n  }\n\n  loadListData() {\n    return {\n      id: this.data.id,\n      type: this.typekey,\n      label: this.data[this.titlekey],\n      data: this.data\n    };\n  }\n\n  standardFilters() {\n    return this.app.state.config.filters;\n  }\n\n  getLinkedObjects(type) //FROM idFields\n  {\n    if (this.data[this.idFields[type]] === undefined) return [];\n    return this.data[this.idFields[type]].map((item_id, i) => {\n      let object = Query.createObject(type, this.app.getItemFromIndex(item_id), this.app);\n      if (object.filter(this.standardFilters())) return false;\n      return object.loadListData();\n    }).filter(i => i);\n  }\n\n  getFieldValues(field) //FROM idFields\n  {\n    if (this.data[this.valueFields[field]] === undefined) return [];\n    return this.data[this.valueFields[field]].map((value, i) => {\n      if (false) return false; // TODO Needs a filter?\n\n      return value;\n    }).filter(i => i);\n  }\n\n  loadCardData() {\n    return {\n      id: this.data.id,\n      fields: this.data,\n      type: this.typekey,\n      heading: this.data[config.elements[this.typekey].field],\n      preview: this.cardPreview(),\n      infoBox: this.infoBox()\n    };\n  }\n\n  infoBox() {\n    let blocks = this.buildBlocks();\n    return {\n      type: this.typekey,\n      title: this.data[this.titlekey],\n      titleLabel: this.tagline,\n      blocks: blocks\n    };\n  }\n\n  cardPreview() {\n    return null;\n  }\n\n}","map":{"version":3,"sources":["/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/src/models/BaseElement.js"],"names":["Query","config","BaseElement","constructor","type","app","item","typekey","data","element","elements","titlekey","field","idFields","tagline","filter","filters","loadListData","id","label","standardFilters","state","getLinkedObjects","undefined","map","item_id","i","object","createObject","getItemFromIndex","getFieldValues","valueFields","value","loadCardData","fields","heading","preview","cardPreview","infoBox","blocks","buildBlocks","title","titleLabel"],"mappings":"AACA;AACA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAE7BC,EAAAA,WAAW,CAACC,IAAD,EAAMC,GAAN,EAAUC,IAAV,EACX;AACI,SAAKC,OAAL,GAAeH,IAAf;AACA,SAAKI,IAAL,GAAYF,IAAZ;AACA,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKI,OAAL,GAAeR,MAAM,CAACS,QAAP,CAAgB,KAAKH,OAArB,CAAf;AACA,SAAKI,QAAL,GAAgB,KAAKF,OAAL,CAAaG,KAA7B;AACA,SAAKC,QAAL,GAAgB,KAAKJ,OAAL,CAAaI,QAA7B;AACA,SAAKC,OAAL,GAAe,KAAKL,OAAL,CAAaK,OAA5B;AACH;;AAEDC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAAE,WAAOhB,KAAK,CAACe,MAAN,CAAaC,OAAb,EAAsB,IAAtB,CAAP;AAAqC;;AAGvDC,EAAAA,YAAY,GAAG;AAEX,WAAO;AACHC,MAAAA,EAAE,EAAE,KAAKV,IAAL,CAAUU,EADX;AAEHd,MAAAA,IAAI,EAAE,KAAKG,OAFR;AAGHY,MAAAA,KAAK,EAAE,KAAKX,IAAL,CAAU,KAAKG,QAAf,CAHJ;AAIHH,MAAAA,IAAI,EAAE,KAAKA;AAJR,KAAP;AAMH;;AACDY,EAAAA,eAAe,GACf;AACI,WAAO,KAAKf,GAAL,CAASgB,KAAT,CAAepB,MAAf,CAAsBe,OAA7B;AACH;;AAGDM,EAAAA,gBAAgB,CAAClB,IAAD,EAAO;AACvB;AACI,QAAI,KAAKI,IAAL,CAAU,KAAKK,QAAL,CAAcT,IAAd,CAAV,MAAmCmB,SAAvC,EAAkD,OAAO,EAAP;AAClD,WAAO,KAAKf,IAAL,CAAU,KAAKK,QAAL,CAAcT,IAAd,CAAV,EAA+BoB,GAA/B,CAAmC,CAACC,OAAD,EAAUC,CAAV,KAAgB;AACtD,UAAIC,MAAM,GAAG3B,KAAK,CAAC4B,YAAN,CAAmBxB,IAAnB,EAAwB,KAAKC,GAAL,CAASwB,gBAAT,CAA0BJ,OAA1B,CAAxB,EAA4D,KAAKpB,GAAjE,CAAb;AACA,UAAIsB,MAAM,CAACZ,MAAP,CAAc,KAAKK,eAAL,EAAd,CAAJ,EAA2C,OAAO,KAAP;AAC3C,aAAOO,MAAM,CAACV,YAAP,EAAP;AACH,KAJM,EAIJF,MAJI,CAIGW,CAAC,IAAKA,CAJT,CAAP;AAKH;;AAEDI,EAAAA,cAAc,CAAClB,KAAD,EAAQ;AACtB;AACI,QAAI,KAAKJ,IAAL,CAAU,KAAKuB,WAAL,CAAiBnB,KAAjB,CAAV,MAAuCW,SAA3C,EAAsD,OAAO,EAAP;AACtD,WAAO,KAAKf,IAAL,CAAU,KAAKuB,WAAL,CAAiBnB,KAAjB,CAAV,EAAmCY,GAAnC,CAAuC,CAACQ,KAAD,EAAQN,CAAR,KAAc;AACxD,UAAG,KAAH,EAAU,OAAO,KAAP,CAD8C,CAChC;;AACxB,aAAOM,KAAP;AACH,KAHM,EAGJjB,MAHI,CAGGW,CAAC,IAAKA,CAHT,CAAP;AAIH;;AAGDO,EAAAA,YAAY,GAAG;AACX,WAAO;AACHf,MAAAA,EAAE,EAAE,KAAKV,IAAL,CAAUU,EADX;AAEHgB,MAAAA,MAAM,EAAE,KAAK1B,IAFV;AAGHJ,MAAAA,IAAI,EAAE,KAAKG,OAHR;AAIH4B,MAAAA,OAAO,EAAE,KAAK3B,IAAL,CAAUP,MAAM,CAACS,QAAP,CAAgB,KAAKH,OAArB,EAA8BK,KAAxC,CAJN;AAKHwB,MAAAA,OAAO,EAAE,KAAKC,WAAL,EALN;AAMHC,MAAAA,OAAO,EAAE,KAAKA,OAAL;AANN,KAAP;AAQH;;AAGDA,EAAAA,OAAO,GAAG;AAEN,QAAIC,MAAM,GAAG,KAAKC,WAAL,EAAb;AAEA,WAAO;AACHpC,MAAAA,IAAI,EAAE,KAAKG,OADR;AAEHkC,MAAAA,KAAK,EAAE,KAAKjC,IAAL,CAAU,KAAKG,QAAf,CAFJ;AAGH+B,MAAAA,UAAU,EAAE,KAAK5B,OAHd;AAIHyB,MAAAA,MAAM,EAAEA;AAJL,KAAP;AAMH;;AAEDF,EAAAA,WAAW,GACX;AACI,WAAO,IAAP;AACH;;AA9E4B","sourcesContent":["\n//import Utils from '../controllers/Utils';\nimport Query from './Query';\nimport config from '../config.json';\n\nexport default class BaseElement {\n\n    constructor(type,app,item)\n    {\n        this.typekey = type;\n        this.data = item;\n        this.app = app;\n        this.element = config.elements[this.typekey];\n        this.titlekey = this.element.field\n        this.idFields = this.element.idFields;\n        this.tagline = this.element.tagline;\n    }\n\n    filter(filters) { return Query.filter(filters, this); }\n\n\n    loadListData() {\n\n        return {\n            id: this.data.id,\n            type: this.typekey,\n            label: this.data[this.titlekey],\n            data: this.data\n        };\n    }\n    standardFilters()\n    {\n        return this.app.state.config.filters;\n    }\n\n\n    getLinkedObjects(type) //FROM idFields\n    {\n        if (this.data[this.idFields[type]] === undefined) return [];\n        return this.data[this.idFields[type]].map((item_id, i) => {\n            let object = Query.createObject(type,this.app.getItemFromIndex(item_id), this.app);\n            if (object.filter(this.standardFilters())) return false;\n            return object.loadListData();\n        }).filter(i => (i));\n    }\n\n    getFieldValues(field) //FROM idFields\n    {\n        if (this.data[this.valueFields[field]] === undefined) return [];\n        return this.data[this.valueFields[field]].map((value, i) => {\n            if(false) return false; // TODO Needs a filter?\n            return value;\n        }).filter(i => (i));\n    }\n\n\n    loadCardData() {\n        return {\n            id: this.data.id,\n            fields: this.data,\n            type: this.typekey,\n            heading: this.data[config.elements[this.typekey].field],\n            preview: this.cardPreview(),\n            infoBox: this.infoBox()\n        };\n    }\n\n\n    infoBox() {\n\n        let blocks = this.buildBlocks();\n\n        return {\n            type: this.typekey,\n            title: this.data[this.titlekey],\n            titleLabel: this.tagline,\n            blocks: blocks\n        };\n    }\n\n    cardPreview()\n    {\n        return null;\n    }\n\n\n\n}"]},"metadata":{},"sourceType":"module"}