{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { css } from 'glamor';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Pane } from '../../layers';\nimport { Paragraph, Heading } from '../../typography';\nimport { Overlay } from '../../overlay';\nimport { Button, IconButton } from '../../buttons';\nimport { withTheme } from '../../theme';\nvar animationEasing = {\n  deceleration: \"cubic-bezier(0.0, 0.0, 0.2, 1)\",\n  acceleration: \"cubic-bezier(0.4, 0.0, 1, 1)\"\n};\nvar ANIMATION_DURATION = 200;\nvar openAnimation = css.keyframes('openAnimation', {\n  from: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  },\n  to: {\n    transform: 'scale(1)',\n    opacity: 1\n  }\n});\nvar closeAnimation = css.keyframes('closeAnimation', {\n  from: {\n    transform: 'scale(1)',\n    opacity: 1\n  },\n  to: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  }\n});\nvar animationStyles = {\n  '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n    animation: \"\".concat(openAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.deceleration, \" both\")\n  },\n  '&[data-state=\"exiting\"]': {\n    animation: \"\".concat(closeAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.acceleration, \" both\")\n  }\n};\n\nvar Dialog =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dialog, _React$Component);\n\n  function Dialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"renderChildren\", function (close) {\n      var children = _this.props.children;\n\n      if (typeof children === 'function') {\n        return children({\n          close: close\n        });\n      }\n\n      if (typeof children === 'string') {\n        return React.createElement(Paragraph, null, children);\n      }\n\n      return children;\n    });\n\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          title = _this$props.title,\n          width = _this$props.width,\n          intent = _this$props.intent,\n          isShown = _this$props.isShown,\n          topOffset = _this$props.topOffset,\n          sideOffset = _this$props.sideOffset,\n          hasHeader = _this$props.hasHeader,\n          hasClose = _this$props.hasClose,\n          hasFooter = _this$props.hasFooter,\n          hasCancel = _this$props.hasCancel,\n          onCloseComplete = _this$props.onCloseComplete,\n          onOpenComplete = _this$props.onOpenComplete,\n          onCancel = _this$props.onCancel,\n          onConfirm = _this$props.onConfirm,\n          confirmLabel = _this$props.confirmLabel,\n          isConfirmLoading = _this$props.isConfirmLoading,\n          isConfirmDisabled = _this$props.isConfirmDisabled,\n          cancelLabel = _this$props.cancelLabel,\n          shouldCloseOnOverlayClick = _this$props.shouldCloseOnOverlayClick,\n          shouldCloseOnEscapePress = _this$props.shouldCloseOnEscapePress,\n          _this$props$container = _this$props.containerProps,\n          containerProps = _this$props$container === void 0 ? {} : _this$props$container,\n          contentContainerProps = _this$props.contentContainerProps,\n          minHeightContent = _this$props.minHeightContent,\n          preventBodyScrolling = _this$props.preventBodyScrolling,\n          overlayProps = _this$props.overlayProps;\n      var sideOffsetWithUnit = Number.isInteger(sideOffset) ? \"\".concat(sideOffset, \"px\") : sideOffset;\n      var maxWidth = \"calc(100% - \".concat(sideOffsetWithUnit, \" * 2)\");\n      var topOffsetWithUnit = Number.isInteger(topOffset) ? \"\".concat(topOffset, \"px\") : topOffset;\n      var maxHeight = \"calc(100% - \".concat(topOffsetWithUnit, \" * 2)\");\n      return React.createElement(Overlay, {\n        isShown: isShown,\n        shouldCloseOnClick: shouldCloseOnOverlayClick,\n        shouldCloseOnEscapePress: shouldCloseOnEscapePress,\n        onExited: onCloseComplete,\n        onEntered: onOpenComplete,\n        containerProps: _objectSpread({\n          display: 'flex',\n          alignItems: 'flex-start',\n          justifyContent: 'center'\n        }, overlayProps),\n        preventBodyScrolling: preventBodyScrolling\n      }, function (_ref) {\n        var state = _ref.state,\n            close = _ref.close;\n        return React.createElement(Pane, _extends({\n          role: \"dialog\",\n          backgroundColor: \"white\",\n          elevation: 4,\n          borderRadius: 8,\n          width: width,\n          maxWidth: maxWidth,\n          maxHeight: maxHeight,\n          marginX: sideOffsetWithUnit,\n          marginY: topOffsetWithUnit,\n          display: \"flex\",\n          flexDirection: \"column\",\n          css: animationStyles,\n          \"data-state\": state\n        }, containerProps), hasHeader && React.createElement(Pane, {\n          padding: 16,\n          flexShrink: 0,\n          borderBottom: \"muted\",\n          display: \"flex\",\n          alignItems: \"center\"\n        }, React.createElement(Heading, {\n          is: \"h4\",\n          size: 600,\n          flex: \"1\"\n        }, title), hasClose && React.createElement(IconButton, {\n          appearance: \"minimal\",\n          icon: \"cross\",\n          onClick: function onClick() {\n            return onCancel(close);\n          }\n        })), React.createElement(Pane, _extends({\n          \"data-state\": state,\n          display: \"flex\",\n          overflow: \"auto\",\n          padding: 16,\n          flexDirection: \"column\",\n          minHeight: minHeightContent\n        }, contentContainerProps), React.createElement(Pane, null, _this2.renderChildren(close))), hasFooter && React.createElement(Pane, {\n          borderTop: \"muted\",\n          clearfix: true\n        }, React.createElement(Pane, {\n          padding: 16,\n          float: \"right\"\n        }, hasCancel && React.createElement(Button, {\n          tabIndex: 0,\n          onClick: function onClick() {\n            return onCancel(close);\n          }\n        }, cancelLabel), React.createElement(Button, {\n          tabIndex: 0,\n          marginLeft: 8,\n          appearance: \"primary\",\n          isLoading: isConfirmLoading,\n          disabled: isConfirmDisabled,\n          onClick: function onClick() {\n            return onConfirm(close);\n          },\n          intent: intent\n        }, confirmLabel))));\n      });\n    }\n  }]);\n\n  return Dialog;\n}(React.Component);\n\nDialog.displayName = \"Dialog\";\n\n_defineProperty(Dialog, \"propTypes\", {\n  /**\n   * Children can be a string, node or a function accepting `({ close })`.\n   * When passing a string, <Paragraph /> is used to wrap the string.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * The intent of the Dialog. Used for the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,\n\n  /**\n   * When true, the dialog is shown.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Title of the Dialog. Titles should use Title Case.\n   */\n  title: PropTypes.node,\n\n  /**\n   * When true, the header with the title and close icon button is shown.\n   */\n  hasHeader: PropTypes.bool,\n\n  /**\n   * When true, the footer with the cancel and confirm button is shown.\n   */\n  hasFooter: PropTypes.bool,\n\n  /**\n   * When true, the cancel button is shown.\n   */\n  hasCancel: PropTypes.bool,\n\n  /**\n   * When true, the close button is shown\n   */\n  hasClose: PropTypes.bool,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the confirm button is clicked.\n   * This does not close the Dialog. A close function will be passed\n   * as a paramater you can use to close the dialog.\n   *\n   * `onConfirm={(close) => close()}`\n   */\n  onConfirm: PropTypes.func,\n\n  /**\n   * Label of the confirm button.\n   */\n  confirmLabel: PropTypes.string,\n\n  /**\n   * When true, the confirm button is set to loading.\n   */\n  isConfirmLoading: PropTypes.bool,\n\n  /**\n   * When true, the confirm button is set to disabled.\n   */\n  isConfirmDisabled: PropTypes.bool,\n\n  /**\n   * Function that will be called when the cancel button is clicked.\n   * This closes the Dialog by default.\n   *\n   * `onCancel={(close) => close()}`\n   */\n  onCancel: PropTypes.func,\n\n  /**\n   * Label of the cancel button.\n   */\n  cancelLabel: PropTypes.string,\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnOverlayClick: PropTypes.bool,\n\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress: PropTypes.bool,\n\n  /**\n   * Width of the Dialog.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space above the dialog.\n   * This offset is also used at the bottom when there is not enough vertical\n   * space available on screen — and the dialog scrolls internally.\n   */\n  topOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space on the left/right sides of the dialog when there isn't enough\n   * horizontal space available on screen.\n   */\n  sideOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The min height of the body content.\n   * Makes it less weird when only showing little content.\n   */\n  minHeightContent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Props that are passed to the dialog container.\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Props that are passed to the content container.\n   */\n  contentContainerProps: PropTypes.object,\n\n  /**\n   * Whether or not to prevent scrolling in the outer body\n   */\n  preventBodyScrolling: PropTypes.bool,\n\n  /**\n   * Props that are passed to the Overlay component.\n   */\n  overlayProps: PropTypes.object\n});\n\n_defineProperty(Dialog, \"defaultProps\", {\n  isShown: false,\n  hasHeader: true,\n  hasClose: true,\n  hasFooter: true,\n  hasCancel: true,\n  intent: 'none',\n  width: 560,\n  topOffset: '12vmin',\n  sideOffset: '16px',\n  minHeightContent: 80,\n  confirmLabel: 'Confirm',\n  isConfirmLoading: false,\n  isConfirmDisabled: false,\n  cancelLabel: 'Cancel',\n  shouldCloseOnOverlayClick: true,\n  shouldCloseOnEscapePress: true,\n  onCancel: function onCancel(close) {\n    return close();\n  },\n  onConfirm: function onConfirm(close) {\n    return close();\n  },\n  preventBodyScrolling: false,\n  overlayProps: {}\n});\n\nexport default withTheme(Dialog);","map":{"version":3,"sources":["../../../src/dialog/src/Dialog.js"],"names":["animationEasing","deceleration","acceleration","ANIMATION_DURATION","openAnimation","from","transform","opacity","to","closeAnimation","animationStyles","animation","Dialog","React","Component","children","PropTypes","intent","isShown","title","hasHeader","hasFooter","hasCancel","hasClose","onCloseComplete","onOpenComplete","onConfirm","confirmLabel","isConfirmLoading","isConfirmDisabled","onCancel","cancelLabel","shouldCloseOnOverlayClick","shouldCloseOnEscapePress","width","topOffset","sideOffset","minHeightContent","containerProps","contentContainerProps","preventBodyScrolling","overlayProps","object","close","sideOffsetWithUnit","Number","maxWidth","topOffsetWithUnit","maxHeight","display","alignItems","justifyContent","state","withTheme"],"mappings":"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","sourcesContent":["import { css } from 'glamor'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Pane } from '../../layers'\nimport { Paragraph, Heading } from '../../typography'\nimport { Overlay } from '../../overlay'\nimport { Button, IconButton } from '../../buttons'\nimport { withTheme } from '../../theme'\n\nconst animationEasing = {\n  deceleration: `cubic-bezier(0.0, 0.0, 0.2, 1)`,\n  acceleration: `cubic-bezier(0.4, 0.0, 1, 1)`\n}\n\nconst ANIMATION_DURATION = 200\n\nconst openAnimation = css.keyframes('openAnimation', {\n  from: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  },\n  to: {\n    transform: 'scale(1)',\n    opacity: 1\n  }\n})\n\nconst closeAnimation = css.keyframes('closeAnimation', {\n  from: {\n    transform: 'scale(1)',\n    opacity: 1\n  },\n  to: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  }\n})\n\nconst animationStyles = {\n  '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n    animation: `${openAnimation} ${ANIMATION_DURATION}ms ${\n      animationEasing.deceleration\n    } both`\n  },\n  '&[data-state=\"exiting\"]': {\n    animation: `${closeAnimation} ${ANIMATION_DURATION}ms ${\n      animationEasing.acceleration\n    } both`\n  }\n}\n\nclass Dialog extends React.Component {\n  static propTypes = {\n    /**\n     * Children can be a string, node or a function accepting `({ close })`.\n     * When passing a string, <Paragraph /> is used to wrap the string.\n     */\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n    /**\n     * The intent of the Dialog. Used for the button.\n     */\n    intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger'])\n      .isRequired,\n\n    /**\n     * When true, the dialog is shown.\n     */\n    isShown: PropTypes.bool,\n\n    /**\n     * Title of the Dialog. Titles should use Title Case.\n     */\n    title: PropTypes.node,\n\n    /**\n     * When true, the header with the title and close icon button is shown.\n     */\n    hasHeader: PropTypes.bool,\n\n    /**\n     * When true, the footer with the cancel and confirm button is shown.\n     */\n    hasFooter: PropTypes.bool,\n\n    /**\n     * When true, the cancel button is shown.\n     */\n    hasCancel: PropTypes.bool,\n\n    /**\n     * When true, the close button is shown\n     */\n    hasClose: PropTypes.bool,\n\n    /**\n     * Function that will be called when the exit transition is complete.\n     */\n    onCloseComplete: PropTypes.func,\n\n    /**\n     * Function that will be called when the enter transition is complete.\n     */\n    onOpenComplete: PropTypes.func,\n\n    /**\n     * Function that will be called when the confirm button is clicked.\n     * This does not close the Dialog. A close function will be passed\n     * as a paramater you can use to close the dialog.\n     *\n     * `onConfirm={(close) => close()}`\n     */\n    onConfirm: PropTypes.func,\n\n    /**\n     * Label of the confirm button.\n     */\n    confirmLabel: PropTypes.string,\n\n    /**\n     * When true, the confirm button is set to loading.\n     */\n    isConfirmLoading: PropTypes.bool,\n\n    /**\n     * When true, the confirm button is set to disabled.\n     */\n    isConfirmDisabled: PropTypes.bool,\n\n    /**\n     * Function that will be called when the cancel button is clicked.\n     * This closes the Dialog by default.\n     *\n     * `onCancel={(close) => close()}`\n     */\n    onCancel: PropTypes.func,\n\n    /**\n     * Label of the cancel button.\n     */\n    cancelLabel: PropTypes.string,\n\n    /**\n     * Boolean indicating if clicking the overlay should close the overlay.\n     */\n    shouldCloseOnOverlayClick: PropTypes.bool,\n\n    /**\n     * Boolean indicating if pressing the esc key should close the overlay.\n     */\n    shouldCloseOnEscapePress: PropTypes.bool,\n\n    /**\n     * Width of the Dialog.\n     */\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * The space above the dialog.\n     * This offset is also used at the bottom when there is not enough vertical\n     * space available on screen — and the dialog scrolls internally.\n     */\n    topOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * The space on the left/right sides of the dialog when there isn't enough\n     * horizontal space available on screen.\n     */\n    sideOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * The min height of the body content.\n     * Makes it less weird when only showing little content.\n     */\n    minHeightContent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * Props that are passed to the dialog container.\n     */\n    containerProps: PropTypes.object,\n\n    /**\n     * Props that are passed to the content container.\n     */\n    contentContainerProps: PropTypes.object,\n\n    /**\n     * Whether or not to prevent scrolling in the outer body\n     */\n    preventBodyScrolling: PropTypes.bool,\n\n    /**\n     * Props that are passed to the Overlay component.\n     */\n    overlayProps: PropTypes.object\n  }\n\n  static defaultProps = {\n    isShown: false,\n    hasHeader: true,\n    hasClose: true,\n    hasFooter: true,\n    hasCancel: true,\n    intent: 'none',\n    width: 560,\n    topOffset: '12vmin',\n    sideOffset: '16px',\n    minHeightContent: 80,\n    confirmLabel: 'Confirm',\n    isConfirmLoading: false,\n    isConfirmDisabled: false,\n    cancelLabel: 'Cancel',\n    shouldCloseOnOverlayClick: true,\n    shouldCloseOnEscapePress: true,\n    onCancel: close => close(),\n    onConfirm: close => close(),\n    preventBodyScrolling: false,\n    overlayProps: {}\n  }\n\n  renderChildren = close => {\n    const { children } = this.props\n\n    if (typeof children === 'function') {\n      return children({ close })\n    }\n\n    if (typeof children === 'string') {\n      return <Paragraph>{children}</Paragraph>\n    }\n\n    return children\n  }\n\n  render() {\n    const {\n      title,\n      width,\n      intent,\n      isShown,\n      topOffset,\n      sideOffset,\n      hasHeader,\n      hasClose,\n      hasFooter,\n      hasCancel,\n      onCloseComplete,\n      onOpenComplete,\n      onCancel,\n      onConfirm,\n      confirmLabel,\n      isConfirmLoading,\n      isConfirmDisabled,\n      cancelLabel,\n      shouldCloseOnOverlayClick,\n      shouldCloseOnEscapePress,\n      containerProps = {},\n      contentContainerProps,\n      minHeightContent,\n      preventBodyScrolling,\n      overlayProps\n    } = this.props\n\n    const sideOffsetWithUnit = Number.isInteger(sideOffset)\n      ? `${sideOffset}px`\n      : sideOffset\n    const maxWidth = `calc(100% - ${sideOffsetWithUnit} * 2)`\n\n    const topOffsetWithUnit = Number.isInteger(topOffset)\n      ? `${topOffset}px`\n      : topOffset\n    const maxHeight = `calc(100% - ${topOffsetWithUnit} * 2)`\n\n    return (\n      <Overlay\n        isShown={isShown}\n        shouldCloseOnClick={shouldCloseOnOverlayClick}\n        shouldCloseOnEscapePress={shouldCloseOnEscapePress}\n        onExited={onCloseComplete}\n        onEntered={onOpenComplete}\n        containerProps={{\n          display: 'flex',\n          alignItems: 'flex-start',\n          justifyContent: 'center',\n          ...overlayProps\n        }}\n        preventBodyScrolling={preventBodyScrolling}\n      >\n        {({ state, close }) => (\n          <Pane\n            role=\"dialog\"\n            backgroundColor=\"white\"\n            elevation={4}\n            borderRadius={8}\n            width={width}\n            maxWidth={maxWidth}\n            maxHeight={maxHeight}\n            marginX={sideOffsetWithUnit}\n            marginY={topOffsetWithUnit}\n            display=\"flex\"\n            flexDirection=\"column\"\n            css={animationStyles}\n            data-state={state}\n            {...containerProps}\n          >\n            {hasHeader && (\n              <Pane\n                padding={16}\n                flexShrink={0}\n                borderBottom=\"muted\"\n                display=\"flex\"\n                alignItems=\"center\"\n              >\n                <Heading is=\"h4\" size={600} flex=\"1\">\n                  {title}\n                </Heading>\n                {hasClose && (\n                  <IconButton\n                    appearance=\"minimal\"\n                    icon=\"cross\"\n                    onClick={() => onCancel(close)}\n                  />\n                )}\n              </Pane>\n            )}\n\n            <Pane\n              data-state={state}\n              display=\"flex\"\n              overflow=\"auto\"\n              padding={16}\n              flexDirection=\"column\"\n              minHeight={minHeightContent}\n              {...contentContainerProps}\n            >\n              <Pane>{this.renderChildren(close)}</Pane>\n            </Pane>\n\n            {hasFooter && (\n              <Pane borderTop=\"muted\" clearfix>\n                <Pane padding={16} float=\"right\">\n                  {/* Cancel should be first to make sure focus gets on it first. */}\n                  {hasCancel && (\n                    <Button tabIndex={0} onClick={() => onCancel(close)}>\n                      {cancelLabel}\n                    </Button>\n                  )}\n\n                  <Button\n                    tabIndex={0}\n                    marginLeft={8}\n                    appearance=\"primary\"\n                    isLoading={isConfirmLoading}\n                    disabled={isConfirmDisabled}\n                    onClick={() => onConfirm(close)}\n                    intent={intent}\n                  >\n                    {confirmLabel}\n                  </Button>\n                </Pane>\n              </Pane>\n            )}\n          </Pane>\n        )}\n      </Overlay>\n    )\n  }\n}\n\nexport default withTheme(Dialog)\n"]},"metadata":{},"sourceType":"module"}