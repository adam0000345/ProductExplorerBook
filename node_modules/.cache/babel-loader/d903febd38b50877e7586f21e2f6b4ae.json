{"ast":null,"code":"var _jsxFileName = \"/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/src/components/Search.js\";\nimport React, { Component } from 'react';\nimport { Pane, Dialog, SearchInput, Badge } from 'evergreen-ui';\nimport SearchControls from \"../controllers/SearchControls.js\";\nimport Utils from '../controllers/Utils.js';\nexport default class Search extends Component {\n  componentDidUpdate() {\n    let search = this.props.app.getUIState(\"search\");\n    search.count = this.resultCount;\n  }\n\n  render() {\n    let results = this.props.results;\n\n    if (Array.isArray(results)) {\n      if (results.length === 0) results = React.createElement(NoResults, {\n        key: Utils.guid(),\n        app: this.props.app,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      });else results = results.map((item, seq) => React.createElement(SearchResult, {\n        key: Utils.guid(),\n        seq: seq,\n        item: item,\n        app: this.props.app,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }));\n    } else if (results === 1) results = React.createElement(Loading, {\n      key: Utils.guid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });else results = null;\n\n    this.resultCount = Array.isArray(results) ? results.length : 0;\n    return React.createElement(Pane, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(Dialog, {\n      width: 1080,\n      isShown: SearchControls.isOpen(this.props.app),\n      title: React.createElement(SearchInput, {\n        autoFocus: true,\n        className: \"searchBar\",\n        onChange: SearchControls.onChange.bind(this.props.app),\n        fontWeight: 800,\n        placeholder: \"Search\",\n        width: \"100%\",\n        height: 60,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }),\n      onCloseComplete: SearchControls.isClosed.bind(this.props.app),\n      hasFooter: false,\n      hasHeader: true,\n      preventBodyScrolling: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Pane, {\n      width: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, results)));\n  }\n\n}\n\nclass SearchResult extends Component {\n  render() {\n    let item = this.props.item;\n    let seq = this.props.seq;\n    let state = this.props.app.getUIState(\"search\");\n    let className = state.index === seq ? \"active\" : \"\";\n    return React.createElement(Pane, {\n      className: \"searchResult \" + className,\n      key: Utils.guid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"CardHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"\",\n      src: './img/' + item.type + '.png',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Badge, {\n      color: item.color,\n      isSolid: true,\n      marginRight: \"1em\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, item.badge), this.highlight(item.label)));\n  }\n\n  highlight(text) {\n    if (Utils.isEmpty(text)) return null;\n    let regex = new RegExp('(' + this.props.app.getUIState(\"search\").query + ')', 'ig');\n    return text.split(regex).map((part, i) => {\n      if (i % 2) return React.createElement(\"span\", {\n        key: Utils.guid(),\n        className: \"searchHighlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, part);\n      return React.createElement(\"span\", {\n        key: Utils.guid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, part);\n    });\n  }\n\n}\n\nclass Loading extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"./img/search.gif\",\n      alt: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), \"Searching...\");\n  }\n\n}\n\nclass NoResults extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"No results found for \\u201C\", this.props.app.getUIState(\"search\").query, \"\\u201D.\");\n  }\n\n}","map":{"version":3,"sources":["/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/src/components/Search.js"],"names":["React","Component","Pane","Dialog","SearchInput","Badge","SearchControls","Utils","Search","componentDidUpdate","search","props","app","getUIState","count","resultCount","render","results","Array","isArray","length","guid","map","item","seq","isOpen","onChange","bind","isClosed","SearchResult","state","className","index","type","color","badge","highlight","label","text","isEmpty","regex","RegExp","query","split","part","i","Loading","NoResults"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Pane, Dialog, SearchInput, Badge } from 'evergreen-ui'\nimport SearchControls from \"../controllers/SearchControls.js\";\nimport Utils from '../controllers/Utils.js';\n\nexport default class Search extends Component {\n\n\n\n    componentDidUpdate(){\n\n        let search = this.props.app.getUIState(\"search\");\n        search.count = this.resultCount;\n    }\n\n    render() {\n\n\n        let results = this.props.results;\n         if(Array.isArray(results))\n        {\n            if(results.length===0) results = <NoResults  key={Utils.guid()}  app={this.props.app} />;\n            else results = results.map((item,seq) => <SearchResult  key={Utils.guid()}  seq={seq} item={item} app={this.props.app} />);\n        } \n        else if(results===1) results = <Loading  key={Utils.guid()} />\n        else results = null;\n\n        this.resultCount = (Array.isArray(results)) ? results.length : 0;\n\n        return (\n            <Pane>\n                <Dialog\n                    width={1080}\n                    isShown={SearchControls.isOpen(this.props.app)}\n                    title={<SearchInput\n                        autoFocus\n                        className=\"searchBar\"\n                        onChange={SearchControls.onChange.bind(this.props.app)}\n                        fontWeight={800} placeholder=\"Search\" width=\"100%\" height={60} />}\n                    onCloseComplete={SearchControls.isClosed.bind(this.props.app)}\n                    hasFooter={false}\n                    hasHeader={true}\n                    preventBodyScrolling\n                >\n                    <Pane width=\"100%\">{results}</Pane>\n                </Dialog>\n            </Pane>)\n    }\n}\nclass SearchResult extends Component {\n\n\n    render() {\n        let item = this.props.item;\n        let seq = this.props.seq;\n        let state = this.props.app.getUIState(\"search\");\n        let className = (state.index===seq) ? \"active\" : \"\";\n        return (\n            <Pane className={\"searchResult \"+className}  key={Utils.guid()} >\n                <div className=\"CardHeading\"><img alt=\"\" src={'./img/' + item.type + '.png'} /><Badge color={item.color} isSolid marginRight=\"1em\">{item.badge}</Badge>{this.highlight(item.label)}</div>\n            </Pane>)\n    }\n\n\n    highlight(text) {\n        if (Utils.isEmpty(text)) return null;\n        let regex = new RegExp('(' + this.props.app.getUIState(\"search\").query + ')', 'ig');\n        return text.split(regex).map((part, i) => {\n            if (i % 2) return <span key={Utils.guid()}  className=\"searchHighlight\">{part}</span>\n            return <span  key={Utils.guid()} >{part}</span>;\n        });\n    }\n}\n\nclass Loading extends Component {\n\n    render()\n    {\n        return <div align=\"center\"><img src={\"./img/search.gif\"} alt=\"search\"/><br/>Searching...</div>\n    }\n\n}\nclass NoResults extends Component {\n\n    render()\n    {\n    return <div align=\"center\">No results found for “{this.props.app.getUIState(\"search\").query}”.</div>\n    }\n\n}"]},"metadata":{},"sourceType":"module"}