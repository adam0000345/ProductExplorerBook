{"ast":null,"code":"var _jsxFileName = \"/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/src/components/Card.js\";\nimport React, { Component } from 'react';\nimport { Button, Pane, Text, Badge, Pill } from 'evergreen-ui';\nimport CardControls from '../controllers/CardControls';\nimport Utils from '../controllers/Utils';\nexport default class Cards extends Component {\n  render() {\n    let item = this.props.cardData;\n    if (CardControls.cardNotInGroup(this.props.app, this.props.cardData, this.props.group)) return null;\n    var max = 1 + Math.floor(Math.random() * 20);\n    var bottom = [];\n\n    for (var i = 1; i <= max; i++) {\n      bottom.push(React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, \"ddd\"));\n    }\n\n    return React.createElement(Pane, {\n      elevation: 3,\n      width: this.props.width,\n      background: \"#FFF\",\n      borderRadius: 15,\n      className: \"Card\",\n      onClick: CardControls.onClickCard.bind(this.props.app, this.props.cardData),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, this.label(this.props.cardData), React.createElement(Text, {\n      className: \"CardHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"\",\n      src: './img/' + item.type + '.png',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), this.heading(item)), this.cardPreview(this.props.app, this.props.cardData.preview));\n  }\n\n  heading(item) {\n    let object = CardControls.buildHeading(item);\n    if (Utils.isEmpty(object.highlight)) return object.heading;\n    let frontandback = object.heading.split(object.highlight);\n    return React.createElement(\"span\", {\n      className: \"cardHeadingNoHighlight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, frontandback[0], React.createElement(\"span\", {\n      className: \"cardHeadingHighlight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, object.highlight), frontandback[1]);\n  }\n\n  label(card) {\n    if (!CardControls.hasLabel(this.props.app)) return null;\n    let label = CardControls.getCardLabel(this.props.app, card);\n    if (Utils.isEmpty(label)) return null;\n    return React.createElement(Badge, {\n      color: label.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, label.label);\n  }\n\n  cardPreview(app, previewData) {\n    if (Utils.isEmpty(previewData)) return null;\n    if (Utils.isEmpty(previewData.type)) return null;\n    if (previewData.type === \"tree\") return React.createElement(\"div\", {\n      className: \"cardPreview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Tree, {\n      app: app,\n      data: previewData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n    if (previewData.type === \"status\") return React.createElement(\"div\", {\n      className: \"cardPreview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Status, {\n      app: app,\n      data: previewData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n    return;\n  }\n\n}\n\nclass Tree extends Component {\n  constructor() {\n    super();\n    this.state = {\n      open: false\n    };\n  }\n\n  render() {\n    let data = this.props.data;\n    if (!this.state.open) return React.createElement(Button, {\n      onClick: this.openTree.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Pill, {\n      display: \"inline-flex\",\n      margin: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, data.buttonNumber), \" \", data.buttonLabel);\n    return React.createElement(\"div\", {\n      className: \"tree\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, data.tree.map(branch => this.branch(branch)));\n  }\n\n  openTree(e) {\n    e.stopPropagation();\n    this.setState({\n      open: true\n    });\n  }\n\n  branch(branch) {\n    return React.createElement(\"div\", {\n      key: Utils.guid(),\n      className: \"branch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"\",\n      src: './img/' + branch.type + '.png',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), branch.label);\n  }\n\n}\n\nclass Status extends Component {\n  render() {\n    let data = this.props.data;\n    if (data === null) return null;\n    if (data.done === true) return this.pastStatus(data);\n    return this.futureStatus(data);\n  }\n\n  pastStatus(data) {\n    return React.createElement(\"div\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Badge, {\n      marginRight: 10,\n      isSolid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, data.label), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Badge, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"v\", data.version), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"\\xA0\"), React.createElement(Badge, {\n      marginRight: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, data.date));\n  }\n\n  futureStatus(data) {\n    return React.createElement(\"div\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Working on it:\"), \" \", React.createElement(Badge, {\n      isSolid: true,\n      color: data.timeframeColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, data.timeframe));\n  }\n\n}","map":{"version":3,"sources":["/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/src/components/Card.js"],"names":["React","Component","Button","Pane","Text","Badge","Pill","CardControls","Utils","Cards","render","item","props","cardData","cardNotInGroup","app","group","max","Math","floor","random","bottom","i","push","width","onClickCard","bind","label","type","heading","cardPreview","preview","object","buildHeading","isEmpty","highlight","frontandback","split","card","hasLabel","getCardLabel","color","previewData","Tree","constructor","state","open","data","openTree","buttonNumber","buttonLabel","tree","map","branch","e","stopPropagation","setState","guid","Status","done","pastStatus","futureStatus","version","date","timeframeColor","timeframe"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Button, Pane, Text, Badge, Pill } from 'evergreen-ui'\nimport CardControls from '../controllers/CardControls'\nimport Utils from '../controllers/Utils';\n\nexport default class Cards extends Component {\n\n    render() {\n        let item = this.props.cardData;\n\n        if (CardControls.cardNotInGroup(this.props.app, this.props.cardData, this.props.group)) return null;\n\n\n        var max = 1 + Math.floor(Math.random() * 20);\n        var bottom = [];\n        for (var i = 1; i <= max; i++) {\n            bottom.push(<div>ddd</div>);\n        }\n\n        return (<Pane\n            elevation={3}\n            width={this.props.width}\n            background=\"#FFF\"\n            borderRadius={15}\n            className=\"Card\"\n            onClick={CardControls.onClickCard.bind(this.props.app, this.props.cardData)}\n        >\n            {this.label(this.props.cardData)}\n            <Text className=\"CardHeading\"><img alt=\"\" src={'./img/' + item.type + '.png'} />{this.heading(item)}</Text>\n\n            {this.cardPreview(this.props.app, this.props.cardData.preview)}\n        </Pane>)\n    }\n\n    heading(item) {\n        let object = CardControls.buildHeading(item);\n        if (Utils.isEmpty(object.highlight)) return object.heading;\n        let frontandback = object.heading.split(object.highlight);\n        return <span className=\"cardHeadingNoHighlight\">{frontandback[0]}<span className=\"cardHeadingHighlight\">{object.highlight}</span>{frontandback[1]}</span>\n\n    }\n\n\n    label(card) {\n        if (!CardControls.hasLabel(this.props.app)) return null\n        let label = CardControls.getCardLabel(this.props.app, card);\n        if (Utils.isEmpty(label)) return null;\n        return <Badge color={label.color}>{label.label}</Badge>\n    }\n\n    cardPreview(app, previewData) {\n        if (Utils.isEmpty(previewData)) return null;\n        if (Utils.isEmpty(previewData.type)) return null;\n        if (previewData.type === \"tree\") return <div className=\"cardPreview\"><Tree app={app} data={previewData} /></div>\n        if (previewData.type === \"status\") return <div className=\"cardPreview\"><Status app={app} data={previewData} /></div>\n        return\n\n    }\n\n\n}\n\n\nclass Tree extends Component {\n\n    constructor() {\n        super();\n        this.state = { open: false }\n    }\n\n    render() {\n        let data = this.props.data;\n        if (!this.state.open) return <Button onClick={this.openTree.bind(this)}><Pill display=\"inline-flex\" margin={8}>{data.buttonNumber}</Pill> {data.buttonLabel}</Button>\n        return <div className=\"tree\">{data.tree.map(branch => this.branch(branch))}</div>\n    }\n\n    openTree(e) {\n        e.stopPropagation();\n        this.setState({ open: true });\n    }\n    branch(branch) {\n        return <div key={Utils.guid()} className=\"branch\"><img alt=\"\" src={'./img/' + branch.type + '.png'} />{branch.label}</div>\n    }\n\n}\n\nclass Status extends Component {\n\n    render() {\n        let data = this.props.data;\n        if(data===null) return null;\n        if(data.done===true) return this.pastStatus(data);\n        return this.futureStatus(data);\n    }\n\n    pastStatus(data)\n    {\n        return <div className=\"status\">\n            <Badge marginRight={10} isSolid>{data.label}</Badge><br/>\n            <Badge >v{data.version}</Badge><span>&nbsp;</span><Badge marginRight={10}>{data.date}</Badge>\n        </div>\n    }\n\n    futureStatus(data)\n    {\n        return <div className=\"status\">\n            <span>Working on it:</span> <Badge isSolid color={data.timeframeColor}>{data.timeframe}</Badge>\n        </div>\n    }\n\n}"]},"metadata":{},"sourceType":"module"}