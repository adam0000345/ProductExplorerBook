{"ast":null,"code":"import _classCallCheck from\"/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import Query from\"../models/Query\";import config from'../config.json';import Utils from\"./Utils\";var CardControls=/*#__PURE__*/function(){function CardControls(){_classCallCheck(this,CardControls);}_createClass(CardControls,null,[{key:\"loadCardsHeading\",value:function loadCardsHeading(app,cards){var views=config.cardViews;var currentView=app.state.config.ui.cards;var view=views[0];for(var i in views){if(currentView===views[i].key)view=views[i];}var s=cards.length!==1?\"s\":\"\";var counter=cards.length+\" \"+view.counter+s;var heading=CardControls.prepareHeading(app,view.heading,view);return{heading:heading,counter:counter};}},{key:\"prepareHeading\",value:function prepareHeading(app,heading,view){if(!heading.match(/{{_}}/))return heading;var sides=heading.split(\"{{_}}\");var headingvariable=view.headingvariable;var filter=app.getFilter(headingvariable);var variable=filter.criteria[0];if(Utils.isEmpty(variable))variable=view.headingdefaultvariable;return sides[0]+Utils.lowerCase(variable)+sides[1];}},{key:\"onClickCard\",value:function onClickCard(item){this.setUIState(\"infoBox\",{isOpen:true,type:item.type,id:item.id});}},{key:\"loadCardView\",value:function loadCardView(app){var type=app.state.config.ui.cards;for(var i in config.cardViews){if(config.cardViews[i].key===type)return config.cardViews[i];}return null;}},{key:\"loadCardGroupings\",value:function loadCardGroupings(app){var cardView=this.loadCardView(app);if(cardView===null)return null;var cardKey=cardView.key;var groupings=config.elements[cardKey].valueFields;var output=[{label:\"—None—\",key:null}];for(var i in groupings){output.push({label:groupings[i],key:i});}return output;}},{key:\"loadCardGrouping\",value:function loadCardGrouping(app){return app.getUIConfig(\"grouping\");}},{key:\"loadGroupingFieldFromKey\",value:function loadGroupingFieldFromKey(elementKey,groupkey){return config.elements[elementKey].valueFields[groupkey];}},{key:\"currentCardGrouping\",value:function currentCardGrouping(app){var key=app.getUIConfig(\"grouping\");var card=app.getUIConfig(\"cards\");var val=config.elements[card].valueFields[key];if(Utils.isEmpty(val))return{label:\"—None—\",value:null};return{label:val,value:key};}},{key:\"currentCardLabel\",value:function currentCardLabel(app){var key=app.getUIConfig(\"label\");var card=app.getUIConfig(\"cards\");var val=config.elements[card].valueFields[key];if(Utils.isEmpty(val))return{label:\"—None—\",value:null};return{label:val,value:key};}},{key:\"loadCardGroups\",value:function loadCardGroups(app,cards){var grouping=this.loadCardGrouping(app);if(grouping===null)return[null];var fields=[];for(var i in cards){var groupingField=this.loadGroupingFieldFromKey(cards[i].type,grouping);var items=cards[i].fields[groupingField];if(items===undefined)continue;if(!Array.isArray(items))items=[items];fields=fields.concat(items);}fields=Utils.dedupe(fields);fields=Utils.sortFieldArray(fields,grouping);return fields;}},{key:\"cardNotInGroup\",value:function cardNotInGroup(app,card,group){if(group===null)return false;var groupingKey=app.state.config.ui.grouping;if(groupingKey===null)return false;var groupingField=config.elements[card.type].valueFields[groupingKey];var fields=card.fields[groupingField];if(!Array.isArray(fields))fields=[fields];if(fields.indexOf(group)<0)return true;}},{key:\"groupCards\",value:function groupCards(selection){this.setUIConfig(\"grouping\",selection.key);}},{key:\"loadCardLabels\",value:function loadCardLabels(app){return this.loadCardGroupings(app);}},{key:\"labelCards\",value:function labelCards(selection){this.setUIConfig(\"label\",selection.key);}},{key:\"hasLabel\",value:function hasLabel(app){return app.getUIConfig(\"label\")!==null;}},{key:\"getCardLabel\",value:function getCardLabel(app,card){var selectedLabelKey=app.state.config.ui.label;var cardType=card.type;if(config.elements[cardType].valueFields[selectedLabelKey]===undefined)return null;var cardLabelField=config.elements[cardType].valueFields[selectedLabelKey];var labelValue=card.fields[cardLabelField];if(Array.isArray(labelValue))labelValue=labelValue.join(\", \");return{label:labelValue,color:Utils.getLabelColor(labelValue)};}},{key:\"buildHeading\",value:function buildHeading(item){var fieldtoHighlight=config.elements[item.type].highlight;if(Utils.isEmpty(fieldtoHighlight))return{heading:item.heading};return{heading:item.heading,highlight:item.fields[fieldtoHighlight]};}}]);return CardControls;}();CardControls.loadCards=function(app){var query=\"story\";//All queries go through user stories\nvar map=app.state.config.ui.cards;//map = \"theme\"; //force theme cards\nvar queryObj=new Query({app:app,query:query,map:map});//console.log({ app: app, query: query, map: map },queryObj); \nvar items=queryObj.filteredObjects();return items.map(function(item){return item.loadCardData();});};CardControls.loadCard=function(state){return{};};export{CardControls as default};","map":{"version":3,"sources":["/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/src/controllers/CardControls.js"],"names":["Query","config","Utils","CardControls","app","cards","views","cardViews","currentView","state","ui","view","i","key","s","length","counter","heading","prepareHeading","match","sides","split","headingvariable","filter","getFilter","variable","criteria","isEmpty","headingdefaultvariable","lowerCase","item","setUIState","isOpen","type","id","cardView","loadCardView","cardKey","groupings","elements","valueFields","output","label","push","getUIConfig","elementKey","groupkey","card","val","value","grouping","loadCardGrouping","fields","groupingField","loadGroupingFieldFromKey","items","undefined","Array","isArray","concat","dedupe","sortFieldArray","group","groupingKey","indexOf","selection","setUIConfig","loadCardGroupings","selectedLabelKey","cardType","cardLabelField","labelValue","join","color","getLabelColor","fieldtoHighlight","highlight","loadCards","query","map","queryObj","filteredObjects","loadCardData","loadCard"],"mappings":"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","sourcesContent":["\nimport Query from \"../models/Query\";\nimport config from '../config.json';\nimport Utils from \"./Utils\";\n\nexport default class CardControls {\n\n    static loadCards = function (app) {\n\n        let query = \"story\"; //All queries go through user stories\n        let map = app.state.config.ui.cards;\n        //map = \"theme\"; //force theme cards\n        let queryObj = new Query({app:app,query:query,map:map}); \n        //console.log({ app: app, query: query, map: map },queryObj); \n        let items = queryObj.filteredObjects();\n        return items.map(item => { return item.loadCardData() });\n\n\n    }\n\n    static loadCard = function (state) {\n\n        return {}\n\n    }\n\n\n    static loadCardsHeading(app,cards) {\n\n        let views = config.cardViews;\n        let currentView = app.state.config.ui.cards;\n\n        let view = views[0]\n        for (let i in views) if (currentView === views[i].key) view = views[i];\n\n        let s = (cards.length!==1) ? \"s\" : \"\";\n        let counter = cards.length+ \" \" +view.counter + s;\n\n        let heading = CardControls.prepareHeading(app,view.heading,view)\n\n        return {\n            heading: heading,\n            counter: counter\n        }\n\n    }\n\n    static prepareHeading(app,heading,view)\n    {\n        if(!heading.match(/{{_}}/)) return heading;\n        let sides = heading.split(\"{{_}}\");\n\n        let headingvariable = view.headingvariable;\n        let filter = app.getFilter(headingvariable);\n\n        let variable = filter.criteria[0];\n        if(Utils.isEmpty(variable)) variable =  view.headingdefaultvariable;\n \n        return  sides[0]+Utils.lowerCase(variable)+sides[1];\n    }\n\n\n    static onClickCard(item)\n    {\n        this.setUIState(\"infoBox\", { isOpen: true,  type: item.type, id: item.id});\n    }\n\n\n    static loadCardView(app)\n    {\n        let type = app.state.config.ui.cards;\n        for(let i in config.cardViews)\n            if(config.cardViews[i].key===type) return  config.cardViews[i]\n        return null;\n    }\n\n    static loadCardGroupings(app)\n    {\n        let cardView = this.loadCardView(app);\n        if(cardView===null) return null;\n        let cardKey = cardView.key;\n        let groupings = config.elements[cardKey].valueFields;\n        let output = [{ label: \"—None—\",key:null}];\n        for (let i in groupings) output.push({ label: groupings[i],key:i});\n        return output;\n    }\n\n    static loadCardGrouping(app) {\n        return app.getUIConfig(\"grouping\");\n    }\n\n    static loadGroupingFieldFromKey(elementKey,groupkey) {\n        \n        return config.elements[elementKey].valueFields[groupkey];\n\n\n    }\n\n    static currentCardGrouping(app)\n    {\n        let key = app.getUIConfig(\"grouping\");\n        let card = app.getUIConfig(\"cards\");\n        let val =  config.elements[card].valueFields[key];\n        if(Utils.isEmpty(val)) return {label:\"—None—\",value:null};\n        return {label:val,value:key};\n    }\n\n    static currentCardLabel(app)\n    {\n        let key = app.getUIConfig(\"label\");\n        let card = app.getUIConfig(\"cards\");\n        let val =  config.elements[card].valueFields[key];\n        if(Utils.isEmpty(val)) return {label:\"—None—\",value:null};\n        return {label:val,value:key};\n    }\n\n    static loadCardGroups(app,cards)\n    {\n        let grouping = this.loadCardGrouping(app);\n        if(grouping===null) return [null];\n        let fields = [];\n        for(let i in  cards)\n        {\n            let groupingField = this.loadGroupingFieldFromKey(cards[i].type,grouping);\n            let items = cards[i].fields[groupingField];\n            if(items===undefined) continue;\n            if(!Array.isArray(items)) items = [items];\n            fields = fields.concat(items);\n        }\n        fields = Utils.dedupe(fields);\n        fields = Utils.sortFieldArray(fields,grouping);\n        return fields;\n    }\n\n    static cardNotInGroup(app,card,group)\n    {\n        if(group===null) return false;\n        let groupingKey = app.state.config.ui.grouping;\n        if (groupingKey===null) return false;\n        let groupingField = config.elements[card.type].valueFields[groupingKey];\n        let fields = card.fields[groupingField];\n        if(!Array.isArray(fields)) fields = [fields];\n        if(fields.indexOf(group)<0) return true;\n    }\n\n    static groupCards(selection)\n    {\n        this.setUIConfig(\"grouping\", selection.key);\n    }\n\n\n\n    static loadCardLabels(app) {\n        return this.loadCardGroupings(app);\n    }\n    static labelCards(selection) {\n        this.setUIConfig(\"label\", selection.key);\n    }\n    static hasLabel(app)\n    {\n        return app.getUIConfig(\"label\")!==null\n    }\n\n    static getCardLabel(app,card) {\n        let selectedLabelKey = app.state.config.ui.label;\n        let cardType = card.type;\n        if (config.elements[cardType].valueFields[selectedLabelKey] === undefined) return null;\n        let cardLabelField = config.elements[cardType].valueFields[selectedLabelKey];\n        let labelValue = card.fields[cardLabelField];\n\n        if(Array.isArray(labelValue)) labelValue = labelValue.join(\", \");\n\n        return { label: labelValue, color: Utils.getLabelColor(labelValue)}\n    }\n\n\n    static buildHeading(item)\n    {\n        let fieldtoHighlight = config.elements[item.type].highlight;\n        if(Utils.isEmpty(fieldtoHighlight)) return {heading:item.heading};\n        return {heading:item.heading,highlight:item.fields[fieldtoHighlight]};\n        \n    }\n\n}"]},"metadata":{},"sourceType":"module"}