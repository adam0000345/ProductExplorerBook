{"ast":null,"code":"import _classCallCheck from\"/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import{Pane,Combobox}from'evergreen-ui';import Card from'./Card.js';import CardControls from'../controllers/CardControls';//import NavControls from '../controllers/NavControls'\nimport Utils from'../controllers/Utils';var Cards=/*#__PURE__*/function(_Component){_inherits(Cards,_Component);function Cards(){_classCallCheck(this,Cards);return _possibleConstructorReturn(this,_getPrototypeOf(Cards).apply(this,arguments));}_createClass(Cards,[{key:\"render\",value:function render(){var _this=this;var cards=CardControls.loadCards(this.props.app);var heading=CardControls.loadCardsHeading(this.props.app,cards);var groups=CardControls.loadCardGroups(this.props.app,cards);var panelWidth=this.props.app.getUIState(\"width\")-0;var cardMinWidth=300;var columnCount=panelWidth/cardMinWidth;var columnCountInt=parseInt(columnCount);var ratio=1+(columnCount-columnCountInt)/columnCount;var cardWidth=parseInt(cardMinWidth*ratio)-25;var groupCount=groups.length;var Single=groupCount===1?\" Single\":\" Multi\";var columns=groups.map(function(groupfield,i,a){return React.createElement(Pane,{className:\"Column\"+Single,width:100/a.length+\"%\",key:Utils.guid()},a.length<=1?null:React.createElement(Pane,{className:\"Heading\"},groupfield,\" \"),React.createElement(Pane,{background:\"#825eeb\",className:\"Cards ColCount\"+columnCountInt,paddingRight:\"2em\",cursor:\"pointer\"},cards.map(function(item){return React.createElement(Card,{width:cardWidth,debug:ratio,key:Utils.guid(),group:groupfield,cardData:item,app:_this.props.app});})));});return React.createElement(React.Fragment,null,React.createElement(Pane,{padding:\".5em\",background:\"#212242\",color:\"#FFF\",className:\"ThirdRow\",borderTop:\"1px solid black\"},React.createElement(\"h4\",null,React.createElement(\"span\",{className:\"left\"},heading.heading),React.createElement(\"table\",{className:\"CardTable\"},React.createElement(\"tbody\",null,React.createElement(\"tr\",{className:\"toprow\"},React.createElement(\"td\",null,\"Label\"),React.createElement(\"td\",null,\"Grouping\")),React.createElement(\"tr\",null,React.createElement(\"td\",null,React.createElement(Combobox,{float:\"right\",width:150,height:20,marginRight:\"1em\",selectedItem:CardControls.currentCardLabel(this.props.app),items:CardControls.loadCardLabels(this.props.app),onChange:CardControls.labelCards.bind(this.props.app),itemToString:function itemToString(item){return item?item.label:'';}})),React.createElement(\"td\",null,React.createElement(Combobox,{float:\"right\",width:150,height:20,marginRight:\"1em\",selectedItem:CardControls.currentCardGrouping(this.props.app),items:CardControls.loadCardGroupings(this.props.app),onChange:CardControls.groupCards.bind(this.props.app),itemToString:function itemToString(item){return item?item.label:'';}}))))))),columns);}}]);return Cards;}(Component);export{Cards as default};","map":{"version":3,"sources":["/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/src/components/Cards.js"],"names":["React","Component","Pane","Combobox","Card","CardControls","Utils","Cards","cards","loadCards","props","app","heading","loadCardsHeading","groups","loadCardGroups","panelWidth","getUIState","cardMinWidth","columnCount","columnCountInt","parseInt","ratio","cardWidth","groupCount","length","Single","columns","map","groupfield","i","a","guid","item","currentCardLabel","loadCardLabels","labelCards","bind","label","currentCardGrouping","loadCardGroupings","groupCards"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport {  Pane, Combobox } from 'evergreen-ui'\nimport Card from './Card.js'\nimport CardControls from '../controllers/CardControls'\n//import NavControls from '../controllers/NavControls'\nimport Utils from '../controllers/Utils';\n\nexport default class Cards extends Component {\n\n\n    render() {\n        let cards = CardControls.loadCards(this.props.app);\n        let heading = CardControls.loadCardsHeading(this.props.app, cards)\n\n        let groups = CardControls.loadCardGroups(this.props.app,cards);\n\n        let panelWidth = this.props.app.getUIState(\"width\")-0;\n        let cardMinWidth = 300;\n        let columnCount = (panelWidth/(cardMinWidth));\n        let columnCountInt = parseInt(columnCount);\n        let ratio = 1+((columnCount-columnCountInt)/columnCount);\n        let cardWidth =parseInt(cardMinWidth*ratio)-25;\n\n        let groupCount = groups.length;\n        let Single = (groupCount===1) ? \" Single\" : \" Multi\";\n\n        let columns = groups.map((groupfield,i,a)=>(\n            <Pane className={\"Column\"+Single} width={(100/a.length)+\"%\"} key={Utils.guid()} >\n                {(a.length<=1) ? null : <Pane className=\"Heading\">{groupfield} </Pane>}\n                <Pane background=\"#825eeb\" className={\"Cards ColCount\"+columnCountInt}\n                    paddingRight=\"2em\"\n                    cursor=\"pointer\"\n                    >\n                    {cards.map(item => (<Card width={cardWidth}  debug={ratio} key={Utils.guid()} group={groupfield} cardData={item} app={this.props.app} />))}\n                </Pane>\n            </Pane>\n        ));\n\n\n        return (\n            <>\n                <Pane padding=\".5em\" background={\"#212242\"} color=\"#FFF\" className=\"ThirdRow\" borderTop=\"1px solid black\">\n                    \n                    <h4><span className=\"left\">{heading.heading}</span>\n                        <table className=\"CardTable\">\n                            <tbody>\n                                <tr className=\"toprow\"><td>Label</td><td>Grouping</td></tr>\n                                <tr><td><Combobox\n                                    float=\"right\"\n                                    width={150}\n                                    height={20}\n                                    marginRight=\"1em\"\n                                    selectedItem={CardControls.currentCardLabel(this.props.app)}\n                                    items={CardControls.loadCardLabels(this.props.app)}\n                                    onChange={CardControls.labelCards.bind(this.props.app)}\n                                    itemToString={item => item ? item.label : ''}\n                                /></td><td><Combobox\n                                    float=\"right\"\n                                    width={150}\n                                        height={20}\n                                    marginRight=\"1em\"\n                                    selectedItem={CardControls.currentCardGrouping(this.props.app)}\n                                    items={CardControls.loadCardGroupings(this.props.app)}\n                                    onChange={CardControls.groupCards.bind(this.props.app)}\n                                    itemToString={item => item ? item.label : ''}\n                                /></td></tr>\n                            </tbody>\n                        </table></h4>\n\n                    \n                </Pane>\n\n                {columns}</>)\n\n    }\n\n\n    \n\n}"]},"metadata":{},"sourceType":"module"}