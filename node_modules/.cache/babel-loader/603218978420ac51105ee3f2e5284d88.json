{"ast":null,"code":"import Query from \"../models/Query\";\nimport Utils from './Utils';\nimport config from '../config.json'; //let config = require('../config.json');\n\nexport default class NavControls {\n  //VERTICALS\n  //Business Objective Functions\n  //Pain Point Functions\n  static cookbookisOpen(app) {\n    return app.getUIState(\"cookbook\").isOpen;\n  }\n\n  static onClickCookbook() {\n    this.setUIState(\"cookbook\", {\n      isOpen: true\n    });\n  }\n\n  static cookbookisClosed() {\n    this.setUIState(\"cookbook\", {\n      isOpen: false\n    });\n  }\n\n}\n\nNavControls.loadCardTypes = function () {\n  return config.cardViews;\n};\n\nNavControls.currentCardView = function (app) {\n  let cards = app.getUIConfig(\"cards\");\n\n  for (let i in config.cardViews) {\n    if (config.cardViews[i].key === cards) {\n      let returnval = {\n        label: config.cardViews[i].label,\n        value: cards\n      };\n      return returnval;\n    }\n  }\n\n  return {\n    label: \"None\"\n  };\n};\n\nNavControls.loadProducts = function () {\n  return config.products;\n};\n\nNavControls.loadUserTypes = function (app) {\n  let userTypes = [];\n  let tablesWithUsers = [\"story\", \"theme\", \"feature\"];\n\n  for (let i in tablesWithUsers) {\n    let key = tablesWithUsers[i];\n    let field = config.elements[key].valueFields.usertype;\n    let query = new Query({\n      app: app,\n      query: key,\n      limit: null\n    });\n    let user_types = query.objects.map(item => item.data[field]);\n\n    for (let j in user_types) {\n      let type = user_types[j];\n      if (!Array.isArray(type)) type = [type];\n\n      for (let k in type) userTypes.push(type[k]);\n    }\n  }\n\n  userTypes = Utils.dedupe(userTypes);\n  userTypes = Utils.sortFieldArray(userTypes, \"usertype\");\n  userTypes = [\"—Any User Type—\"].concat(userTypes);\n  return userTypes;\n};\n\nNavControls.currentUserType = function (app) {\n  let type = this.getUserType(app);\n  if (type === undefined) return \"—Any User Type—\";\n  return type;\n};\n\nNavControls.setUserType = function (val) {\n  this.deleteFilter(\"usertype\");\n  if (val === \"—Any User Type—\") return false;\n  this.setFilter(\"usertype\", [val], \"whitelist\");\n};\n\nNavControls.getUserType = function (app) {\n  let userfilter = app.getFilter(\"usertype\");\n  return userfilter.criteria[0];\n};\n\nNavControls.loadVerticals = function (app) {\n  let verticalQuery = new Query({\n    app: app,\n    query: \"story\",\n    map: \"vertical\"\n  }); //, limit:null\n\n  let verticals = verticalQuery.objects.map(item => ({\n    \"value\": item.data.id,\n    \"label\": item.data.Vertical,\n    badges: [\"X Themes\"]\n  }));\n  verticals.push({\n    label: \"—Any Vertical—\",\n    value: null\n  });\n  return verticals.reverse();\n};\n\nNavControls.currentVertical = function (app) {\n  let id = NavControls.getVertical(app);\n  let objects = NavControls.loadVerticals(app);\n\n  for (let i in objects) if (id === objects[i].value) return objects[i];\n\n  return objects[0];\n};\n\nNavControls.setVertical = function (selection) {\n  this.deleteFilter(\"vertical\");\n  if (selection.value === null) return false;\n  this.setFilter(\"vertical\", [selection.value], \"whitelist\");\n};\n\nNavControls.getVertical = function (app) {\n  let vertfilter = app.getFilter(\"vertical\");\n  return vertfilter.criteria[0];\n};\n\nNavControls.loadFilters = function () {\n  return config.multiSelectFilters;\n};\n\nNavControls.currentFilter = function (app) {\n  let filters = config.multiSelectFilters;\n  let currentKey = app.state.config.ui.filter;\n\n  for (let i in filters) if (currentKey === filters[i].key) return filters[i];\n\n  return filters[0];\n};\n\nNavControls.setFilter = function (val) {\n  let filters = config.multiSelectFilters;\n\n  for (var i in filters) this.deleteFilter(filters[i].key);\n\n  this.setUIConfig(\"filter\", val.key);\n};\n\nNavControls.getCardView = function (app) {\n  app.getUIConfig(\"cards\");\n};\n\nNavControls.setCardView = function (val) {\n  this.setUIConfig(\"cards\", val.key);\n  this.setUIConfig(\"grouping\", null);\n};\n\nNavControls.multiSelect = function (app, key, a) {\n  let currentKey = app.state.config.ui.filter;\n  let functions = {\n    title: \"Business Objectives\",\n    label: this.labelBusinessObjectives(app),\n    options: this.loadBusinessObjectives(app),\n    selected: this.selectedBusinessObjectives(app),\n    onSelect: this.onSelectBusinessObjective.bind(app),\n    onDeselect: this.onDeselectBusinessObjective.bind(app)\n  };\n\n  if (currentKey === \"painpoint\") {\n    functions = {\n      title: \"Pain Points\",\n      label: this.labelPainPoints(app),\n      options: this.loadPainPoints(app),\n      selected: this.selectedPainPoints(app),\n      onSelect: this.onSelectPainPoint.bind(app),\n      onDeselect: this.onDeselectPainPoint.bind(app)\n    };\n  }\n\n  return functions[key];\n};\n\nNavControls.labelBusinessObjectives = function (app) {\n  let count = this.selectedBusinessObjectives(app).length;\n  if (count === 0) return \"Select Business Objectives\";\n  return count + \" Business Objective\" + (count > 1 ? \"s\" : \"\");\n};\n\nNavControls.loadAllBusinessObjectives = function (app) {\n  let objectiveQuery = new Query({\n    app: app,\n    query: \"objective\"\n  });\n  return objectiveQuery.objects.map(item => ({\n    \"value\": item.data.id,\n    \"label\": item.data.Objective,\n    type: \"objective\"\n  }));\n};\n\nNavControls.loadBusinessObjectives = function (app) {\n  let objectiveQuery = new Query({\n    app: app,\n    query: \"story\",\n    map: \"objective\",\n    limit: [\"vertical\", \"usertype\"]\n  });\n  return objectiveQuery.objects.map(item => ({\n    \"value\": item.data.id,\n    \"label\": item.data.Objective,\n    type: \"objective\"\n  }));\n};\n\nNavControls.selectedBusinessObjectives = function (app) {\n  let filter = app.getFilter(\"objective\");\n  return filter.criteria;\n};\n\nNavControls.onSelectBusinessObjective = function (selection) {\n  let filter = this.getFilter(\"objective\");\n  filter.criteria.push(selection.value);\n  let criteria = Utils.dedupe(filter.criteria);\n  this.setFilter(\"objective\", criteria, \"whitelist\");\n};\n\nNavControls.onDeselectBusinessObjective = function (selection) {\n  let filter = this.getFilter(\"objective\");\n  let criteria = Utils.removeFromArray(filter.criteria, selection.value);\n  this.setFilter(\"objective\", criteria, \"whitelist\");\n};\n\nNavControls.labelPainPoints = function (app) {\n  let count = this.selectedPainPoints(app).length;\n  if (count === 0) return \"Select Pain Points\";\n  return count + \" Pain Point\" + (count > 1 ? \"s\" : \"\");\n};\n\nNavControls.loadPainPoints = function (app) {\n  let painPointQuery = new Query({\n    app: app,\n    query: \"story\",\n    map: \"painpoint\",\n    limit: [\"vertical\", \"usertype\"]\n  });\n  let tmp = painPointQuery.objects.map(item => ({\n    \"value\": item.data.id,\n    \"label\": item.data['Pain Point']\n  }));\n  return tmp;\n};\n\nNavControls.selectedPainPoints = function (app) {\n  let filter = app.getFilter(\"painpoint\");\n  return filter.criteria;\n};\n\nNavControls.onSelectPainPoint = function (selection) {\n  let filter = this.getFilter(\"painpoint\");\n  filter.criteria.push(selection.value);\n  let criteria = Utils.dedupe(filter.criteria);\n  this.setFilter(\"painpoint\", criteria, \"whitelist\");\n};\n\nNavControls.onDeselectPainPoint = function (selection) {\n  let filter = this.getFilter(\"painpoint\");\n  let criteria = Utils.removeFromArray(filter.criteria, selection.value);\n  this.setFilter(\"painpoint\", criteria, \"whitelist\");\n};\n\nNavControls.loadCardGroups = function () {\n  return config.cardViews;\n};","map":{"version":3,"sources":["/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/src/controllers/NavControls.js"],"names":["Query","Utils","config","NavControls","cookbookisOpen","app","getUIState","isOpen","onClickCookbook","setUIState","cookbookisClosed","loadCardTypes","cardViews","currentCardView","cards","getUIConfig","i","key","returnval","label","value","loadProducts","products","loadUserTypes","userTypes","tablesWithUsers","field","elements","valueFields","usertype","query","limit","user_types","objects","map","item","data","j","type","Array","isArray","k","push","dedupe","sortFieldArray","concat","currentUserType","getUserType","undefined","setUserType","val","deleteFilter","setFilter","userfilter","getFilter","criteria","loadVerticals","verticalQuery","verticals","id","Vertical","badges","reverse","currentVertical","getVertical","setVertical","selection","vertfilter","loadFilters","multiSelectFilters","currentFilter","filters","currentKey","state","ui","filter","setUIConfig","getCardView","setCardView","multiSelect","a","functions","title","labelBusinessObjectives","options","loadBusinessObjectives","selected","selectedBusinessObjectives","onSelect","onSelectBusinessObjective","bind","onDeselect","onDeselectBusinessObjective","labelPainPoints","loadPainPoints","selectedPainPoints","onSelectPainPoint","onDeselectPainPoint","count","length","loadAllBusinessObjectives","objectiveQuery","Objective","removeFromArray","painPointQuery","tmp","loadCardGroups"],"mappings":"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","sourcesContent":["import Query from \"../models/Query\";\nimport Utils from './Utils';\nimport config from '../config.json';\n//let config = require('../config.json');\n\nexport default class NavControls {\n\n    static loadCardTypes = function () {\n\n        return config.cardViews;\n    }\n\n    static currentCardView = function (app)\n    {\n        let cards = app.getUIConfig(\"cards\");\n        for(let i in config.cardViews)\n        {\n            if(config.cardViews[i].key===cards)\n            {\n                let returnval = {label : config.cardViews[i].label, value : cards};\n                return returnval;\n            } \n        } \n        return {label : \"None\"};\n    }\n\n    static loadProducts = function () {\n\n        return config.products;\n    }\n\n\n\n    static loadUserTypes = function (app) {\n\n        let userTypes = [];\n        let tablesWithUsers = [\"story\",\"theme\",\"feature\"];\n        for(let i in tablesWithUsers)\n        {\n            let key = tablesWithUsers[i];\n            let field = config.elements[key].valueFields.usertype;\n            let query = new Query({ app: app, query: key, limit: null });\n            let user_types = query.objects.map(item => item.data[field]);\n            for(let j in user_types)\n            {\n                let type = user_types[j];\n                if(!Array.isArray(type)) type = [type];\n                for(let k in type) userTypes.push(type[k]);\n            }\n        }\n        userTypes = Utils.dedupe(userTypes);\n        userTypes = Utils.sortFieldArray(userTypes,\"usertype\");\n        userTypes = [\"—Any User Type—\"].concat(userTypes);\n        return userTypes;\n    }\n\n    static currentUserType = function (app) {\n        let type =  this.getUserType(app);\n        if(type===undefined) return \"—Any User Type—\"\n        return type;\n    }\n\n    static setUserType = function (val) {\n        this.deleteFilter(\"usertype\");\n        if (val === \"—Any User Type—\") return false;\n        this.setFilter(\"usertype\", [val], \"whitelist\");\n    }\n\n    static getUserType = function (app) {\n        let userfilter = app.getFilter(\"usertype\");\n        return userfilter.criteria[0];\n    }\n\n\n\n    //VERTICALS\n\n\n    static loadVerticals = function (app) {\n\n        let verticalQuery = new Query({ app: app, query: \"story\", map: \"vertical\" }); //, limit:null\n        let verticals = verticalQuery.objects.map(item => (\n            { \"value\": item.data.id, \"label\": item.data.Vertical, badges: [\"X Themes\"] }\n        ))\n        verticals.push({ label: \"—Any Vertical—\", value: null });\n        return verticals.reverse();\n    }\n\n    static currentVertical = function (app) {\n\n        let id = NavControls.getVertical(app);\n        let objects = NavControls.loadVerticals(app);\n        for (let i in objects) if (id === objects[i].value) return objects[i];\n        return objects[0];\n    }\n\n    static setVertical = function (selection) {\n\n        this.deleteFilter(\"vertical\");\n        if (selection.value===null) return false;\n        this.setFilter(\"vertical\", [selection.value], \"whitelist\");\n    }\n\n    static getVertical = function (app) {\n        let vertfilter = app.getFilter(\"vertical\");\n        return vertfilter.criteria[0];\n    }\n\n    static loadFilters = function () {\n        return config.multiSelectFilters;\n\n    }\n\n    static currentFilter = function (app) {\n\n        let filters = config.multiSelectFilters;\n        let currentKey = app.state.config.ui.filter;\n        for (let i in filters) if (currentKey === filters[i].key) return filters[i];\n        return filters[0];\n    }\n\n    static setFilter = function (val) {\n\n        let filters = config.multiSelectFilters;\n        for (var i in filters) this.deleteFilter(filters[i].key);\n        this.setUIConfig(\"filter\", val.key);\n    }\n\n\n\n\n    static getCardView = function (app) {\n        app.getUIConfig(\"cards\");\n    }\n    static setCardView = function (val) {\n\n        this.setUIConfig(\"cards\", val.key);\n        this.setUIConfig(\"grouping\", null);\n    }\n\n\n    static multiSelect = function (app, key, a) {\n        let currentKey = app.state.config.ui.filter;\n\n\n        let functions = {\n            title: \"Business Objectives\",\n            label: this.labelBusinessObjectives(app),\n            options: this.loadBusinessObjectives(app),\n            selected: this.selectedBusinessObjectives(app),\n            onSelect: this.onSelectBusinessObjective.bind(app),\n            onDeselect: this.onDeselectBusinessObjective.bind(app)\n        }\n\n        if (currentKey === \"painpoint\") {\n            functions = {\n                title: \"Pain Points\",\n                label: this.labelPainPoints(app),\n                options: this.loadPainPoints(app),\n                selected: this.selectedPainPoints(app),\n                onSelect: this.onSelectPainPoint.bind(app),\n                onDeselect: this.onDeselectPainPoint.bind(app)\n            }\n        }\n        return functions[key];\n    }\n\n    //Business Objective Functions\n\n\n    static labelBusinessObjectives = function (app) {\n\n        let count = this.selectedBusinessObjectives(app).length;\n        if (count === 0) return \"Select Business Objectives\";\n        return count + \" Business Objective\" + ((count > 1) ? \"s\" : \"\");\n\n    }\n    static loadAllBusinessObjectives = function (app) {\n        let objectiveQuery = new Query({ app: app, query: \"objective\" });\n        return objectiveQuery.objects.map(item => (\n            { \"value\": item.data.id, \"label\": item.data.Objective, type: \"objective\" }\n        ))\n    }\n    static loadBusinessObjectives = function (app) {\n        let objectiveQuery = new Query({ app: app,  query: \"story\", map: \"objective\", limit:[\"vertical\",\"usertype\"] } );\n        return objectiveQuery.objects.map(item => (\n            { \"value\": item.data.id, \"label\": item.data.Objective, type: \"objective\" }\n        ))\n    }\n    static selectedBusinessObjectives = function (app) {\n\n        let filter = app.getFilter(\"objective\");\n        return filter.criteria;\n\n    }\n    static onSelectBusinessObjective = function (selection) {\n\n        let filter = this.getFilter(\"objective\");\n        filter.criteria.push(selection.value);\n        let criteria = Utils.dedupe(filter.criteria);\n        this.setFilter(\"objective\", criteria, \"whitelist\");\n    }\n\n    static onDeselectBusinessObjective = function (selection) {\n        let filter = this.getFilter(\"objective\");\n        let criteria = Utils.removeFromArray(filter.criteria, selection.value);\n        this.setFilter(\"objective\", criteria, \"whitelist\");\n    }\n\n\n    //Pain Point Functions\n\n\n    static labelPainPoints = function (app) {\n\n        let count = this.selectedPainPoints(app).length;\n        if (count === 0) return \"Select Pain Points\";\n        return count + \" Pain Point\" + ((count > 1) ? \"s\" : \"\");\n\n    }\n    static loadPainPoints = function (app) {\n\n        let painPointQuery = new Query({ app: app, query: \"story\", map: \"painpoint\", limit: [\"vertical\",\"usertype\"] });\n        let tmp = painPointQuery.objects.map(item => (\n            { \"value\": item.data.id, \"label\": item.data['Pain Point'] }\n        ))\n        return tmp;\n    }\n    static selectedPainPoints = function (app) {\n\n        let filter = app.getFilter(\"painpoint\");\n        return filter.criteria;\n\n    }\n    static onSelectPainPoint = function (selection) {\n\n        let filter = this.getFilter(\"painpoint\");\n        filter.criteria.push(selection.value);\n        let criteria = Utils.dedupe(filter.criteria);\n        this.setFilter(\"painpoint\", criteria, \"whitelist\");\n    }\n\n    static onDeselectPainPoint = function (selection) {\n        let filter = this.getFilter(\"painpoint\");\n        let criteria = Utils.removeFromArray(filter.criteria, selection.value);\n        this.setFilter(\"painpoint\", criteria, \"whitelist\");\n    }\n\n\n    static loadCardGroups = function () {\n\n        return config.cardViews;\n    }\n\n\n    static cookbookisOpen(app) {\n        return app.getUIState(\"cookbook\").isOpen;\n    }\n\n    static onClickCookbook() {\n        this.setUIState(\"cookbook\", { isOpen: true });\n    }\n\n    static cookbookisClosed()\n    {\n        this.setUIState(\"cookbook\", { isOpen: false });\n    }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}