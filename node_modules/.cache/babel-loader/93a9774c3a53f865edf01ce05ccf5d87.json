{"ast":null,"code":"import config from '../config.json';\nexport default class Utils {\n  static dedupe(items) {\n    let unique = {};\n    items.forEach(function (i) {\n      if (!unique[i]) {\n        unique[i] = true;\n      }\n    });\n    return Object.keys(unique);\n  }\n\n  static guid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : r & 0x3 & 0x8;\n      return v.toString(16);\n    });\n  }\n\n  static removeFromArray(array, value) {\n    const index = array.indexOf(value);\n\n    if (index > -1) {\n      array.splice(index, 1);\n    }\n\n    return array;\n  }\n\n  static isEmpty(value) {\n    if (value === undefined) return true;\n    if (value === null) return true;\n    if (value === \"\") return true;\n    if (value === []) return true;\n    if (value === {}) return true;\n    if (/^\\s*$/.test(value)) return true;\n    return false;\n  }\n\n  static sortFieldArray(array, field) {\n    array = array.sort(function (x, y) {\n      let model = config.sorting[field];\n      let key = 0;\n      if (Utils.isEmpty(model)) return 0;\n      let indexX = model.indexOf(x);\n      let indexY = model.indexOf(y);\n      if (indexX === -1 || indexY === -1) return 0;\n      if (indexX < indexY) key = 1;\n      if (indexX < indexY) key = -1;\n      return key;\n    }); //console.log(array);\n\n    return array;\n  }\n\n  static sortObjectByKey(object, key) {\n    return object;\n  }\n\n  static stringToIndex(str, length) {\n    let hash = this.hash(str);\n    return Math.abs(parseInt(hash) % length + 1);\n  }\n\n  static hash(val) {\n    var hash = 0,\n        i,\n        chr;\n    if (val.length === 0) return hash;\n\n    for (i = 0; i < val.length; i++) {\n      chr = val.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return hash;\n  }\n\n  static lowerCase(str) {\n    str = str.toLowerCase();\n    let caps = config.caps;\n\n    for (let i in config.caps) str = str.replace(i, caps[i]);\n\n    return str;\n  }\n\n  static getLabelColor(labelValue) {\n    let colorMap = config.colors;\n\n    if (colorMap[labelValue] === undefined) {\n      let bank = config.colorBank;\n      let i = Utils.stringToIndex(labelValue + bank.join(\"\"), bank.length);\n      return bank[i];\n    }\n\n    return colorMap[labelValue];\n  }\n\n}","map":{"version":3,"sources":["/Users/adam.tothfejel/Desktop/LabelBoxFolder/BirdHouse/src/controllers/Utils.js"],"names":["config","Utils","dedupe","items","unique","forEach","i","Object","keys","guid","replace","c","r","Math","random","v","toString","removeFromArray","array","value","index","indexOf","splice","isEmpty","undefined","test","sortFieldArray","field","sort","x","y","model","sorting","key","indexX","indexY","sortObjectByKey","object","stringToIndex","str","length","hash","abs","parseInt","val","chr","charCodeAt","lowerCase","toLowerCase","caps","getLabelColor","labelValue","colorMap","colors","bank","colorBank","join"],"mappings":"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","sourcesContent":["\nimport config from '../config.json';\nexport default class Utils {\n\n  static dedupe(items) {\n    let unique = {};\n    items.forEach(function (i) {\n      if (!unique[i]) {\n        unique[i] = true;\n      }\n    });\n    return Object.keys(unique);\n  }\n\n  static guid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 & 0x8);\n      return v.toString(16);\n    });\n  }\n\n  static removeFromArray(array, value) {\n    const index = array.indexOf(value);\n    if (index > -1) {\n      array.splice(index, 1);\n    }\n    return array;\n  }\n\n\n  static isEmpty(value) {\n\n    if (value === undefined) return true;\n    if (value === null) return true;\n    if (value === \"\") return true;\n    if (value === []) return true;\n    if (value === {}) return true;\n    if (/^\\s*$/.test(value)) return true;\n    return false;\n  }\n\n  static sortFieldArray(array, field) {\n    array = array.sort(function (x, y) {\n      let model = config.sorting[field];\n      let key = 0;\n      if (Utils.isEmpty(model)) return  0;\n      let indexX = model.indexOf(x);\n      let indexY = model.indexOf(y);\n      if (indexX === -1 || indexY === -1 ) return 0;\n      if (indexX < indexY) key =  1;\n      if (indexX < indexY) key =  -1;\n      return key;\n    });\n    //console.log(array);\n    return array;\n  }\n\n  static sortObjectByKey(object, key) {\n\n    return object;\n  }\n\n\n  static stringToIndex(str, length) {\n\n    let hash = this.hash(str);\n    return Math.abs(parseInt(hash) % length + 1)\n  }\n\n  static hash(val) {\n    var hash = 0, i, chr;\n    if (val.length === 0) return hash;\n    for (i = 0; i < val.length; i++) {\n      chr = val.charCodeAt(i);\n      hash = ((hash << 5) - hash) + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n  }\n\n\n  static lowerCase(str) {\n    str = str.toLowerCase();\n    let caps = config.caps;\n    for (let i in config.caps) str = str.replace(i,caps[i]);\n    return str;\n  }\n\n\n  static getLabelColor(labelValue) {\n    let colorMap = config.colors;\n    if (colorMap[labelValue] === undefined) {\n      let bank = config.colorBank;\n      let i = Utils.stringToIndex(labelValue + bank.join(\"\"), bank.length)\n      return bank[i];\n    }\n    return colorMap[labelValue];\n\n  }\n\n}"]},"metadata":{},"sourceType":"module"}