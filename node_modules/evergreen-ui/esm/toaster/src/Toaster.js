import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';
import ReactDOM from 'react-dom';
import ToastManager from './ToastManager';
var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';
/**
 * The Toaster manages the interactionsb between
 * the ToasterManger and the toast API.
 */

var Toaster = function Toaster() {
  var _this = this;

  _classCallCheck(this, Toaster);

  _defineProperty(this, "_bindNotify", function (handler) {
    _this.notifyHandler = handler;
  });

  _defineProperty(this, "_bindRemove", function (handler) {
    _this.removeHandler = handler;
  });

  _defineProperty(this, "_bindGetToasts", function (handler) {
    _this.getToastsHandler = handler;
  });

  _defineProperty(this, "_bindCloseAll", function (handler) {
    _this.closeAllHandler = handler;
  });

  _defineProperty(this, "getToasts", function () {
    return _this.getToastsHandler();
  });

  _defineProperty(this, "closeAll", function () {
    return _this.closeAllHandler();
  });

  _defineProperty(this, "notify", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'none'
    }));
  });

  _defineProperty(this, "success", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'success'
    }));
  });

  _defineProperty(this, "warning", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'warning'
    }));
  });

  _defineProperty(this, "danger", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'danger'
    }));
  });

  _defineProperty(this, "remove", function (id) {
    return _this.removeHandler(id);
  });

  if (!isBrowser) return;
  var container = document.createElement('div');
  container.setAttribute('data-evergreen-toaster-container', '');
  document.body.appendChild(container);
  ReactDOM.render(React.createElement(ToastManager, {
    bindNotify: this._bindNotify,
    bindRemove: this._bindRemove,
    bindGetToasts: this._bindGetToasts,
    bindCloseAll: this._bindCloseAll
  }), container);
};

export { Toaster as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b2FzdGVyL3NyYy9Ub2FzdGVyLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUmVhY3RET00iLCJUb2FzdE1hbmFnZXIiLCJpc0Jyb3dzZXIiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIlRvYXN0ZXIiLCJoYW5kbGVyIiwibm90aWZ5SGFuZGxlciIsInJlbW92ZUhhbmRsZXIiLCJnZXRUb2FzdHNIYW5kbGVyIiwiY2xvc2VBbGxIYW5kbGVyIiwidGl0bGUiLCJzZXR0aW5ncyIsImludGVudCIsImlkIiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInJlbmRlciIsIl9iaW5kTm90aWZ5IiwiX2JpbmRSZW1vdmUiLCJfYmluZEdldFRvYXN0cyIsIl9iaW5kQ2xvc2VBbGwiXSwibWFwcGluZ3MiOiI7OztBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLFdBQXJCO0FBQ0EsT0FBT0MsWUFBUCxNQUF5QixnQkFBekI7QUFFQSxJQUFNQyxTQUFTLEdBQ2IsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUFpQyxPQUFPQSxNQUFNLENBQUNDLFFBQWQsS0FBMkIsV0FEOUQ7QUFHQTs7Ozs7SUFJcUJDLE8sR0FDbkIsbUJBQWM7QUFBQTs7QUFBQTs7QUFBQSx1Q0FrQkEsVUFBQUMsT0FBTyxFQUFJO0FBQ3ZCLElBQUEsS0FBSSxDQUFDQyxhQUFMLEdBQXFCRCxPQUFyQjtBQUNELEdBcEJhOztBQUFBLHVDQXNCQSxVQUFBQSxPQUFPLEVBQUk7QUFDdkIsSUFBQSxLQUFJLENBQUNFLGFBQUwsR0FBcUJGLE9BQXJCO0FBQ0QsR0F4QmE7O0FBQUEsMENBMEJHLFVBQUFBLE9BQU8sRUFBSTtBQUMxQixJQUFBLEtBQUksQ0FBQ0csZ0JBQUwsR0FBd0JILE9BQXhCO0FBQ0QsR0E1QmE7O0FBQUEseUNBOEJFLFVBQUFBLE9BQU8sRUFBSTtBQUN6QixJQUFBLEtBQUksQ0FBQ0ksZUFBTCxHQUF1QkosT0FBdkI7QUFDRCxHQWhDYTs7QUFBQSxxQ0FrQ0YsWUFBTTtBQUNoQixXQUFPLEtBQUksQ0FBQ0csZ0JBQUwsRUFBUDtBQUNELEdBcENhOztBQUFBLG9DQXNDSCxZQUFNO0FBQ2YsV0FBTyxLQUFJLENBQUNDLGVBQUwsRUFBUDtBQUNELEdBeENhOztBQUFBLGtDQTBDTCxVQUFDQyxLQUFELEVBQTBCO0FBQUEsUUFBbEJDLFFBQWtCLHVFQUFQLEVBQU87QUFDakMsV0FBTyxLQUFJLENBQUNMLGFBQUwsQ0FBbUJJLEtBQW5CLG9CQUErQkMsUUFBL0I7QUFBeUNDLE1BQUFBLE1BQU0sRUFBRTtBQUFqRCxPQUFQO0FBQ0QsR0E1Q2E7O0FBQUEsbUNBOENKLFVBQUNGLEtBQUQsRUFBMEI7QUFBQSxRQUFsQkMsUUFBa0IsdUVBQVAsRUFBTztBQUNsQyxXQUFPLEtBQUksQ0FBQ0wsYUFBTCxDQUFtQkksS0FBbkIsb0JBQStCQyxRQUEvQjtBQUF5Q0MsTUFBQUEsTUFBTSxFQUFFO0FBQWpELE9BQVA7QUFDRCxHQWhEYTs7QUFBQSxtQ0FrREosVUFBQ0YsS0FBRCxFQUEwQjtBQUFBLFFBQWxCQyxRQUFrQix1RUFBUCxFQUFPO0FBQ2xDLFdBQU8sS0FBSSxDQUFDTCxhQUFMLENBQW1CSSxLQUFuQixvQkFBK0JDLFFBQS9CO0FBQXlDQyxNQUFBQSxNQUFNLEVBQUU7QUFBakQsT0FBUDtBQUNELEdBcERhOztBQUFBLGtDQXNETCxVQUFDRixLQUFELEVBQTBCO0FBQUEsUUFBbEJDLFFBQWtCLHVFQUFQLEVBQU87QUFDakMsV0FBTyxLQUFJLENBQUNMLGFBQUwsQ0FBbUJJLEtBQW5CLG9CQUErQkMsUUFBL0I7QUFBeUNDLE1BQUFBLE1BQU0sRUFBRTtBQUFqRCxPQUFQO0FBQ0QsR0F4RGE7O0FBQUEsa0NBMERMLFVBQUFDLEVBQUUsRUFBSTtBQUNiLFdBQU8sS0FBSSxDQUFDTixhQUFMLENBQW1CTSxFQUFuQixDQUFQO0FBQ0QsR0E1RGE7O0FBQ1osTUFBSSxDQUFDWixTQUFMLEVBQWdCO0FBRWhCLE1BQU1hLFNBQVMsR0FBR1gsUUFBUSxDQUFDWSxhQUFULENBQXVCLEtBQXZCLENBQWxCO0FBQ0FELEVBQUFBLFNBQVMsQ0FBQ0UsWUFBVixDQUF1QixrQ0FBdkIsRUFBMkQsRUFBM0Q7QUFDQWIsRUFBQUEsUUFBUSxDQUFDYyxJQUFULENBQWNDLFdBQWQsQ0FBMEJKLFNBQTFCO0FBRUFmLEVBQUFBLFFBQVEsQ0FBQ29CLE1BQVQsQ0FDRSxvQkFBQyxZQUFEO0FBQ0UsSUFBQSxVQUFVLEVBQUUsS0FBS0MsV0FEbkI7QUFFRSxJQUFBLFVBQVUsRUFBRSxLQUFLQyxXQUZuQjtBQUdFLElBQUEsYUFBYSxFQUFFLEtBQUtDLGNBSHRCO0FBSUUsSUFBQSxZQUFZLEVBQUUsS0FBS0M7QUFKckIsSUFERixFQU9FVCxTQVBGO0FBU0QsQzs7U0FqQmtCVixPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCBUb2FzdE1hbmFnZXIgZnJvbSAnLi9Ub2FzdE1hbmFnZXInXG5cbmNvbnN0IGlzQnJvd3NlciA9XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG5cbi8qKlxuICogVGhlIFRvYXN0ZXIgbWFuYWdlcyB0aGUgaW50ZXJhY3Rpb25zYiBiZXR3ZWVuXG4gKiB0aGUgVG9hc3Rlck1hbmdlciBhbmQgdGhlIHRvYXN0IEFQSS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9hc3RlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICghaXNCcm93c2VyKSByZXR1cm5cblxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS1ldmVyZ3JlZW4tdG9hc3Rlci1jb250YWluZXInLCAnJylcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcilcblxuICAgIFJlYWN0RE9NLnJlbmRlcihcbiAgICAgIDxUb2FzdE1hbmFnZXJcbiAgICAgICAgYmluZE5vdGlmeT17dGhpcy5fYmluZE5vdGlmeX1cbiAgICAgICAgYmluZFJlbW92ZT17dGhpcy5fYmluZFJlbW92ZX1cbiAgICAgICAgYmluZEdldFRvYXN0cz17dGhpcy5fYmluZEdldFRvYXN0c31cbiAgICAgICAgYmluZENsb3NlQWxsPXt0aGlzLl9iaW5kQ2xvc2VBbGx9XG4gICAgICAvPixcbiAgICAgIGNvbnRhaW5lclxuICAgIClcbiAgfVxuXG4gIF9iaW5kTm90aWZ5ID0gaGFuZGxlciA9PiB7XG4gICAgdGhpcy5ub3RpZnlIYW5kbGVyID0gaGFuZGxlclxuICB9XG5cbiAgX2JpbmRSZW1vdmUgPSBoYW5kbGVyID0+IHtcbiAgICB0aGlzLnJlbW92ZUhhbmRsZXIgPSBoYW5kbGVyXG4gIH1cblxuICBfYmluZEdldFRvYXN0cyA9IGhhbmRsZXIgPT4ge1xuICAgIHRoaXMuZ2V0VG9hc3RzSGFuZGxlciA9IGhhbmRsZXJcbiAgfVxuXG4gIF9iaW5kQ2xvc2VBbGwgPSBoYW5kbGVyID0+IHtcbiAgICB0aGlzLmNsb3NlQWxsSGFuZGxlciA9IGhhbmRsZXJcbiAgfVxuXG4gIGdldFRvYXN0cyA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRUb2FzdHNIYW5kbGVyKClcbiAgfVxuXG4gIGNsb3NlQWxsID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmNsb3NlQWxsSGFuZGxlcigpXG4gIH1cblxuICBub3RpZnkgPSAodGl0bGUsIHNldHRpbmdzID0ge30pID0+IHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlIYW5kbGVyKHRpdGxlLCB7IC4uLnNldHRpbmdzLCBpbnRlbnQ6ICdub25lJyB9KVxuICB9XG5cbiAgc3VjY2VzcyA9ICh0aXRsZSwgc2V0dGluZ3MgPSB7fSkgPT4ge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeUhhbmRsZXIodGl0bGUsIHsgLi4uc2V0dGluZ3MsIGludGVudDogJ3N1Y2Nlc3MnIH0pXG4gIH1cblxuICB3YXJuaW5nID0gKHRpdGxlLCBzZXR0aW5ncyA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5SGFuZGxlcih0aXRsZSwgeyAuLi5zZXR0aW5ncywgaW50ZW50OiAnd2FybmluZycgfSlcbiAgfVxuXG4gIGRhbmdlciA9ICh0aXRsZSwgc2V0dGluZ3MgPSB7fSkgPT4ge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeUhhbmRsZXIodGl0bGUsIHsgLi4uc2V0dGluZ3MsIGludGVudDogJ2RhbmdlcicgfSlcbiAgfVxuXG4gIHJlbW92ZSA9IGlkID0+IHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVIYW5kbGVyKGlkKVxuICB9XG59XG4iXX0=